<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Closed Principle | Mike Valenty]]></title>
  <link href="http://www.agileatwork.com/blog/categories/open-closed-principle/atom.xml" rel="self"/>
  <link href="http://www.agileatwork.com/"/>
  <updated>2014-03-11T22:12:17-07:00</updated>
  <id>http://www.agileatwork.com/</id>
  <author>
    <name><![CDATA[Mike Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring Decorators with Google Guice]]></title>
    <link href="http://www.agileatwork.com/configuring-decorators-with-google-guice/"/>
    <updated>2012-02-20T07:11:00-08:00</updated>
    <id>http://www.agileatwork.com/configuring-decorators-with-google-guice</id>
    <content type="html"><![CDATA[<p>You have a few options and each have their trade-offs. The one I find least annoying requires using a binding annotation. Since I’m stuck using annotations with Guice anyway, using one more to facilitate a decorator seems like an acceptable concession. Before I go on though, I have to take a moment. My beef isn’t about verbose configuration or annotations, it’s that once again the documentation gets it all wrong and sends the impressionable reader down a misguided path. Let’s take a look at this excerpt from the Guice documentation for binding annotations:</p>

<p>``` java
public class RealBillingService implements BillingService {</p>

<p>  @Inject
  public RealBillingService(@PayPal CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>This bit of innocuous code encourages the reader to squander the power of dependency inversion and reduce it to a clunky tool that makes unit testing a little bit easier. That sounds harsh, so let’s start by discussing what Guice is and the problem it solves.</p>

<p>Guice and the like are referred to as IoC containers. That’s Inversion of Control. It’s a pretty general principle and when applied to object oriented programming, it manifests itself in the form of a technique called <em>Dependency Inversion</em>. In terms of the <code>BillingService</code> example, it means the code depends on a <code>CreditCardProcessor</code> abstraction rather than new‘ing something specific like a <code>PayPalCreditCardProcessor</code>. Perhaps depends is an overloaded term here. With or without the new keyword, there is a dependency. In one case, a higher level module is responsible for deciding what implementation to use, and in the other case, the class itself decides that it’s using a <code>PayPalCreditCardProcessor</code>, period.</p>

<p>Writing all your classes to declare their dependencies leaves you with the tedious task of building up complex object graphs before you can actually use your object. This is where Guice comes in. It’s a tool to simplify the havoc wreaked by inverting your dependencies and it’s inevitable when guided by a few principles like DRY (Don’t Repeat Yourself). If you don’t believe me, go ahead a see for yourself. Write some truly SOLID code and you’ll end up writing an IoC container in the process.</p>

<p>So now that we’ve covered what Guice is and the problem it solves, we are ready to talk about what’s wrong with <code>@PayPal</code>. Specifying the concrete class you expect with an annotation is pretty much the same as just declaring the dependency explicitly. Sure, you get a few points for using an interface and injecting the object, but it’s really just going through the motions while entirely missing the point. It would be like the Karate Kid going into auto detailing after learning wax-on, wax-off.</p>

<p>Abstractions create seams in your code. It’s how you add new behavior as the application evolves and it’s the key to managing complexity. Since we’re looking at a billing example, let’s throw out a few requirements that could pop up. How about some protection against running the same transaction twice in a short time period. How about checking a blacklist of credit cards or customers. Or maybe you need a card number that always fails in a particular way so QA can test the sad path. Or maybe your company works with a few payment gateways and wants to choose the least cost option based on the charge amount or card type. In this little snippet of code, we’ve got 2 seams we can use to work in this behavior. We’ve got the <code>BillingService</code> and <code>CreditCardProcesor</code>.</p>

<p>Oh, wait a minute we’re declaring that we need the <code>PayPalCreditCardProcessor</code> with that annotation so now our code is rigid and we can’t inject additional behavior by wrapping it in a <code>DoubleChargeCreditCardProcessor</code>, open-closed style. That’s the ‘O’ in SOLID. So you’re probably thinking, why can’t you just change the annotation from <code>@PayPal</code> to <code>@DoubleCharge</code>? Let’s dive a little deeper into this example to find out:</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  @Inject
  public DoubleChargeCreditCardProcessor(CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>I’m not going to rant about how extends is evil and that you’re better off with a decorator because <a href="/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/">I’ve already done that</a>, and this article is about how to wire up a decorator with Guice. So the challenge here is how to configure the container to supply the correct credit card processor as the first dependency of our double charge processor which itself implements <code>CreditCardProcessor</code>. Looking at the Guice documentation, you would likely think the answer is to do this:</p>

<p>``` java
public class RealBillingService implements BillingService {</p>

<p>  @Inject
  public RealBillingService(@DoubleCharge CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  @Inject
  public DoubleChargeCreditCardProcessor(@PayPal CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>That’s wrong though. The <code>CreditCardProcessor</code> isn’t a <em>thing</em>, it’s a <em>seam</em> and it’s where you put additional behavior like preventing duplicate charges in a short time period. If you look at the decorator, you’ll notice that it has nothing to do with PayPal. That’s because it’s a business rule and shouldn’t be mixed with integration code. Our business rule code and the PayPal integration code will likely live in different packages and the <code>CreditCardProcessor</code> abstraction could get assembled differently for any number of reasons. Maybe your application supports <a href="/bolt-on-multi-tenancy-in-asp-net-mvc-with-unity-and-nhibernate-part-ii-commingled-data/">multi-tenancy</a> and each tenant can use a different payment gateway. We can’t reuse our double charge business rule if it’s hard-coded to wrap a PayPal processor, and that’s a problem.</p>

<p>While I don’t particularly like using annotations for this sort of thing, it’s not the root cause. As a mechanic, it works just fine and can help us accomplish our task. The problem is that the documentation is subtly wrong and encourages mis-use of this feature. The better way to use binding annotations and not undermine the point of injecting your dependencies is like so:</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  public static final String BASE = &ldquo;DoubleChargeCreditCardProcessor.base&rdquo;;</p>

<p>  public DoubleChargeCreditCardProcessor(@Named(BASE) CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>``` java
public class ConfigureCreditCardProcessor extends AbstractModule {</p>

<p>  @Override
  protected void configure() {</p>

<pre><code>bind(CreditCardProcessor.class).to(DoubleChargeCreditCardProcessor.class);

bind(CreditCardProcessor.class)
  .annotatedWith(Names.named(DoubleChargeCreditCardProcessor.BASE))
  .to(PayPayCreditCardProcessor.class);
</code></pre>

<p>  }
}
```</p>

<p>The difference is subtle, but the devil is in the details. In this last example, the <code>DoubleChargeCreditCardProcessor</code> doesn’t know or care what implementation it’s decorating. It simply declares a name for it’s dependency so it can be referenced unambiguously in a configuration module. This moves the configuration logic to… well, configuration code. Now you can see that the code is once again flexible and you can easily imagine more sophisticated configuration logic that could consider tenant settings or environment variables in selecting the proper combination of credit card processors to assemble.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bolt-on Multi-Tenancy in ASP.NET MVC with Unity and NHibernate: Part II – Commingled Data]]></title>
    <link href="http://www.agileatwork.com/bolt-on-multi-tenancy-in-asp-net-mvc-with-unity-and-nhibernate-part-ii-commingled-data/"/>
    <updated>2011-06-18T11:08:00-07:00</updated>
    <id>http://www.agileatwork.com/bolt-on-multi-tenancy-in-asp-net-mvc-with-unity-and-nhibernate-part-ii-commingled-data</id>
    <content type="html"><![CDATA[<p>Last time I went over going from separate web applications per tenant to a shared web application for all tenants, but each tenant still had its own database. Now we’re going to take the next step and let multiple tenants share the same database. After we add <code>tenant_id</code> to most of the tables in our database we’ll need the application to take care of a few things. First, we need to apply a where clause to all queries to ensure that each tenant sees only their data. This is pretty painless with NHibernate, we just have to define a parameterized filter:</p>

<p>``` xml
&lt;hibernate-mapping xmlns=&ldquo;urn:nhibernate-mapping-2.2&rdquo;></p>

<p>  &lt;filter-def name=&ldquo;tenant&rdquo;></p>

<pre><code>&lt;filter-param name="id" type="System.Int32" /&gt;
</code></pre>

<p>  &lt;/filter-def></p>

<p>&lt;/hibernate-mapping>
```</p>

<p>And then apply it to each entity:</p>

<p>``` xml
<class name="User" table="[user]"></p>

<p>  <id name="Id" column="user_id"></p>

<pre><code>&lt;generator class="identity" /&gt;
</code></pre>

<p>  </id></p>

<p>  <property name="Username" />
  <property name="Email" /></p>

<p>  <filter name="tenant" condition="tenant_id = :id" /></p>

<p></class>
```</p>

<p>The last step is to set the value of the filter at runtime. This is done on the <code>ISession</code> like this:</p>

<p>``` c#
Container</p>

<pre><code>.RegisterType&lt;ISession&gt;(
    new PerRequestLifetimeManager(),
    new InjectionFactory(c =&gt;
    {
        var session = c.Resolve&lt;ISessionFactory&gt;().OpenSession();
        session.EnableFilter("tenant").SetParameter("id", c.Resolve&lt;Tenant&gt;().Id);
        return session;
    })
);
</code></pre>

<p>```</p>

<p>The current tenant comes from <code>c.Resolve&lt;Tenant&gt;()</code>. In order for that to work, you have to tell Unity how to find the current tenant. In ASP.NET MVC, we can look at the host header on the request and find our tenant that way. We could just as easily use another strategy though. Maybe if this were a WCF service, we could use an authentication header to establish the current tenant context. You could build out some interfaces and strategies around establishing the current tenant context, however for this article I’ll just bang it out.</p>

<p>``` c#
Container</p>

<pre><code>.RegisterType&lt;Tenant&gt;(new InjectionFactory(c =&gt;
{
    var repository = c.Resolve&lt;ITenantRepository&gt;();

    var context = c.Resolve&lt;HttpContextBase&gt;();

    var host = context.Request.Headers["Host"] ?? context.Request.Url.Host;

    return repository.FindByHost(host);
}));
</code></pre>

<p>```</p>

<p>Second, we have to set the <code>tenant_id</code> when new entities are saved. This is a bit more complicated with NHibernate and requires a bit of a concession in that we have to add a field to the entity in order for NHibernate to know how to persist the value. I’m using a private nullable int for this.</p>

<p>``` c#
public class User
{</p>

<pre><code>private int? tenantId;

public virtual int Id { get; set; }

public virtual string Username { get; set; }

public virtual string Email { get; set; }
</code></pre>

<p>}
```</p>

<p>It’s private because I don’t want the business logic to deal with it and it’s nullable because my tenant table is in a separate database which means I can’t lean on the data model to enforce referential integrity. That’s a problem because the default value for an integer is zero which could be happily saved by the database. By making it nullable I can be sure the database will blow up if the <code>tenant_id</code> is not set.</p>

<p>So, back to the issue at hand. The <code>tenant_id</code> needs to be set when the entity is saved. For this, I’m using an interceptor and setting the value in the <code>OnSave</code> method:</p>

<p>``` c#
public class MultiTenantInterceptor : EmptyInterceptor
{</p>

<pre><code>private readonly Func&lt;Tenant&gt; tenant;

public MultiTenantInterceptor(Func&lt;Tenant&gt; tenant)
{
    this.tenant = tenant;
}

public override bool OnSave(object entity... object[] state, string[] propertyNames...)
{
    var index = Array.IndexOf(propertyNames, "tenantId");

    if (index == -1)
        return false;

    var tenantId = tenant().Id;

    state[index] = tenantId;

    entity
        .GetType()
        .GetField("tenantId", BindingFlags.Instance | BindingFlags.NonPublic)
        .SetValue(entity, tenantId);

    return false;
}
</code></pre>

<p>}
```</p>

<p>This <code>IInterceptor</code> mechanism is a little wonky. If you change any data, you have to do it in both the entity instance and the state array that NHibernate uses to hydrate entities. It’s not a big deal, it’s just one of those things you have to accept like the fact that Apple and Google are tracking your every move via your smart phone. Oh, and the interceptor gets wired up like this:</p>

<p>``` c#
Container</p>

<pre><code>.RegisterType&lt;ISessionFactory&gt;(
    new ContainerControlledLifetimeManager(),
    new InjectionFactory(c =&gt;
    {
        return new NHibernate.Cfg.Configuration()
            .Configure()
            .SetInterceptor(new MultiTenantInterceptor(() =&gt; c.Resolve&lt;Tenant&gt;()))
            .BuildSessionFactory();
    })
);
</code></pre>

<p>```</p>

<p>We’re almost done. There is one more case that needs to be handled. When NHibernate loads an entity by its primary key, it doesn’t run through the query engine which means the tenant filter isn’t applied. Fortunately, we can take care of this in the interceptor:</p>

<p>``` c#
public class MultiTenantInterceptor : EmptyInterceptor
{</p>

<pre><code>...

public override bool OnLoad(object entity... object[] state, string[] propertyNames...)
{
    var index = Array.IndexOf(propertyNames, "tenantId");

    if (index == -1)
        return false;

    var entityTenantId = Convert.ToInt32(state[index]);

    var currentTenantId = tenant().Id;

    if (entityTenantId != currentTenantId)
    {
        throw new AuthorizationException("Permission denied to {0}", entity);
    }

    return false;
}
</code></pre>

<p>}
```</p>

<p>That’s it. Have fun and happy commingling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bolt-on Multi-Tenancy in ASP.NET MVC with Unity and NHibernate]]></title>
    <link href="http://www.agileatwork.com/bolt-on-multi-tenancy-in-asp-net-mvc-with-unity-and-nhibernate/"/>
    <updated>2011-05-14T13:09:00-07:00</updated>
    <id>http://www.agileatwork.com/bolt-on-multi-tenancy-in-asp-net-mvc-with-unity-and-nhibernate</id>
    <content type="html"><![CDATA[<h3>The Mission:</h3>

<p>Build a web application as though it’s for a single customer (tenant) and add multi-tenancy as a bolt-on feature by writing only new code. There are flavors of multi-tenancy, in this case I want each tenant to have its own database but I want all tenants to share the same web application and figure out who’s who by looking at the host header on the http request.</p>

<h3>The Plan:</h3>

<p>To pull this off, we’re going to have to rely on our SOLID design principles, especially Single Responsibility and Dependency Inversion. We’ll get some help from these frameworks:</p>

<ul>
<li><a href="http://www.asp.net/mvc">ASP.NET MVC</a></li>
<li><a href="http://unity.codeplex.com/">Unity</a></li>
<li><a href="http://nhforge.org/Default.aspx">NHibernate</a></li>
</ul>


<h3>Game on:</h3>

<p>Let’s take a look at a controller that uses NHibernate to talk to the database. I’m not going to get into whether you should talk directly to NHibernate from the controller or go through a service layer or repository because it doesn’t affect how we’re going to add multi-tenancy. The important thing here is that the <code>ISession</code> is injected into the controller, and we aren’t using the service locator pattern to request the <code>ISession</code> from a singleton.</p>

<p>``` c#
public class UserController : Controller
{</p>

<pre><code>private readonly ISession session;

public UserController(ISession session)
{
    this.session = session;
}

public ActionResult Edit(int id)
{
    var user = session.Load&lt;User&gt;(id);

    return View(user);
}
</code></pre>

<p>}
```</p>

<p>Alright, now it’s time to write some new code and make our web application connect to the correct database based on the host header in the http request. First, we’ll need a database to store a list of tenants along with the connection string for that tenant’s database. Here’s my entity:</p>

<p>``` c#
public class Tenant
{</p>

<pre><code>public virtual string Name { get; set; }

public virtual string Host { get; set; }

public virtual string ConnectionString { get; set; }
</code></pre>

<p>}
```</p>

<p>I’ll use the repository pattern here so there is a crisp consumer of the <code>ISession</code> that connects to the lookup database rather than one of the tenant shards. This will be important later when we go to configure Unity.</p>

<p>``` c#
public class NHibernateTenantRepository : ITenantRepository
{</p>

<pre><code>private readonly ISession session;
private readonly HttpContextBase context;

public NHibernateTenantRepository(ISession session, HttpContextBase context)
{
    this.session = session;
    this.context = context;
}

public Tenant Current
{
    get
    {
        var host = context.Request.Headers["Host"];
        return FindByHost(host);
    }
}

public Tenant FindByHost(string host)
{
    return session
        .Query&lt;Tenant&gt;()
        .SingleOrDefault(t =&gt; t.Host == host);
}
</code></pre>

<p>}
```</p>

<p>So now we need a dedicated <code>ISessionFactory</code> for the lookup database and make sure that our <code>NHibernateTenantRepository</code> gets the right <code>ISession</code>. It’s not too bad, we just need to name them in the container so we can refer to them explicitly.</p>

<p>``` c#
Container</p>

<pre><code>.RegisterType&lt;ISessionFactory&gt;(
    "tenant_session_factory",
    new ContainerControlledLifetimeManager(),
    new InjectionFactory(c =&gt;
        new NHibernate.Cfg.Configuration().Configure().BuildSessionFactory())
);
</code></pre>

<p>Container</p>

<pre><code>.RegisterType&lt;ISession&gt;(
    "tenant_session",
    new PerRequestLifetimeManager(),
    new InjectionFactory(c =&gt;
        c.Resolve&lt;ISessionFactory&gt;("tenant_session_factory").OpenSession())
);
</code></pre>

<p>Container</p>

<pre><code>.RegisterType&lt;ITenantRepository, NHibernateTenantRepository&gt;()
.RegisterType&lt;NHibernateTenantRepository&gt;(
    new InjectionConstructor(
        new ResolvedParameter&lt;ISession&gt;("tenant_session"),
        new ResolvedParameter&lt;HttpContextBase&gt;()
    )
);
</code></pre>

<p>```</p>

<p>Hopefully that’s about what you were expecting since it’s not really the interesting part. The more interesting part is configuring the <code>ISession</code> that gets injected into the <code>UserController</code> to connect to a different database based on the host header in the http request. The Unity feature we’re going to leverage for this is the <code>LifetimeManager</code>. This is an often overlooked feature of IoC containers.</p>

<p>``` c#
Container</p>

<pre><code>.RegisterType&lt;ISessionFactory&gt;(
    new PerHostLifetimeManager(() =&gt; new HttpContextWrapper(HttpContext.Current)),
    new InjectionFactory(c =&gt;
    {
        var connString = c
            .Resolve&lt;ITenantRepository&gt;()
            .Current
            .ConnectionString;

        return new NHibernate.Cfg.Configuration()
            .Configure()
            .SetProperty(NHibernate.Cfg.Environment.ConnectionString, connString)
            .BuildSessionFactory();
    }));
</code></pre>

<p>Container</p>

<pre><code>.RegisterType&lt;ISession&gt;(
    new PerRequestLifetimeManager(),
    new InjectionFactory(c =&gt; c.Resolve&lt;ISessionFactory&gt;().OpenSession())
);
</code></pre>

<p>```</p>

<p>Here we’re using a custom <code>PerHostLifetimeManager</code>. This tells Unity to maintain a session factory per host. When Unity runs across a host it doesn’t have a session factory for, it will run the <code>InjectionFactory</code> block to create one using the connection string associated with that tenant.</p>

<p>Since multiple simultaneous requests will be trying to get and set values with the same key, we need to make sure our <code>PerHostLifetimeManager</code> is thread safe. That’s pretty easy since Unity comes with a <code>SynchronizedLifetimeManager</code> base class that takes care of the fact that <code>Dictionary</code> <a href="http://stackoverflow.com/questions/157933/whats-the-best-way-of-implementing-a-thread-safe-dictionary-in-net">isn’t thread safe</a>.</p>

<p>``` c#
public class PerHostLifetimeManager : SynchronizedLifetimeManager
{</p>

<pre><code>private readonly Func&lt;HttpContextBase&gt; context;
private readonly IDictionary&lt;string, object&gt; store;

public PerHostLifetimeManager(Func&lt;HttpContextBase&gt; context)
{
    this.context = context;
    store = new Dictionary&lt;string, object&gt;();
}

protected override object SynchronizedGetValue()
{
    var host = GetHost();

    if (!store.ContainsKey(host))
        return null;

    return store[host];
}

protected override void SynchronizedSetValue(object newValue)
{
    store[GetHost()] = newValue;
}

private string GetHost()
{
    return context().Request.Headers["Host"];
}
</code></pre>

<p>}
```</p>

<p>So what did we accomplish? Well we didn’t touch any of our existing application code. We just wrote new code and through configuration we added multi-tenancy! That’s pretty cool, but was it worth it? Well, the goal in itself isn’t super important, but this exercise can certainly highlight areas of your codebase where you might be violating the single responsibility principle or leaking too many infrastructure concepts into your application logic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Custom HttpModule to Log Request Duration]]></title>
    <link href="http://www.agileatwork.com/a-custom-httpmodule-to-log-request-duration/"/>
    <updated>2011-01-16T02:31:00-08:00</updated>
    <id>http://www.agileatwork.com/a-custom-httpmodule-to-log-request-duration</id>
    <content type="html"><![CDATA[<p>My application has logging of fine-grained operations, but I want to see the duration of the entire web request. The idea is to start a <code>Stopwatch</code> on the <code>BeginRequest</code> event and then log the elapsed time on the <code>EndRequest</code> event. I started by modifying the <code>Global.asax</code> to wire this up, but quickly got turned off because I was violating the Open-Closed Principle. I really just want to bolt-in this behavior while I’m profiling the application and then turn it off when the kinks are worked out. IIS has a pretty slick extension point for this sort of thing that let’s you hook into the request lifecycle events.</p>

<p>``` c#
public class RequestDurationLoggerModule : IHttpModule
{</p>

<pre><code>private const string ContextItemKey = "stopwatchContextItemKey";

public void Init(HttpApplication application)
{
    application.BeginRequest += (o, args) =&gt;
    {
        application.Context.Items[ContextItemKey] = Stopwatch.StartNew();
    };

    application.EndRequest += (o, args) =&gt;
    {
        var stopwatch = (Stopwatch)application.Context.Items[ContextItemKey];
        stopwatch.Stop();

        var logger = GetLogger(application);

        logger.Debug(
            "{0} -&gt; [{1} ms]",
            application.Context.Request.RawUrl,
            stopwatch.ElapsedMilliseconds);
    };
}

private static ILogger GetLogger(HttpApplication application)
{
    var serviceProvider = application as IServiceProvider;

    if (serviceProvider == null)
    {
        return new NullLogger();
    }

    return serviceProvider.GetService&lt;ILogger&gt;();
}

public void Dispose()
{
}
</code></pre>

<p>}
```</p>

<p>The only weird part here is getting a handle to the logger. I’m using an IoC container in my application, however I can’t tell IIS how to build up my <code>RequestDurationLoggerModule</code>, so I’m stuck using the Service Locator pattern. The container could be a singleton, but I don’t like singletons, so I implemented <code>IServiceProvider</code> in <code>Global.asax</code> instead. All that’s left now is wiring in the module. Since Cassini behaves like IIS6, you have to use the legacy style configuration, which looks like this:</p>

<p>``` xml
  &lt;system.web></p>

<pre><code>&lt;httpModules&gt;
  &lt;add name="..." type="MyApplication.RequestDurationLoggerModule, MyApplication"/&gt;
&lt;/httpModules&gt;
</code></pre>

<p>  &lt;/system.web>
```</p>

<p>For IIS7 though, you add it like this:</p>

<p>``` xml
  &lt;system.webServer></p>

<pre><code>&lt;modules&gt;
  &lt;add name="..." type="MyApplication.RequestDurationLoggerModule, MyApplication"/&gt;
&lt;/modules&gt;
</code></pre>

<p>  &lt;/system.webServer>
```</p>

<p>Finally, it’s time to run the application and see the total request duration logged.</p>

<p><img class="plain" src="/images/posts/durationmodule.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Does it Hurt?]]></title>
    <link href="http://www.agileatwork.com/where-does-it-hurt/"/>
    <updated>2009-12-26T20:30:00-08:00</updated>
    <id>http://www.agileatwork.com/where-does-it-hurt</id>
    <content type="html"><![CDATA[<p>Notes from my Brown Bag Learning Forum Presentation. <a href="http://www.secure-session.com/files/20/205/1664955444/E20E1B7ED7/i/brownbag-20110205b.zip">Download the source code</a>, or just sit back and relax.</p>

<h3>GoF Patterns:</h3>

<ul>
<li>Chain of Responsibility</li>
<li>Decorator</li>
<li>Adapter</li>
</ul>


<h3>Buzz Phrases:</h3>

<ul>
<li>Single Responsibility Principle</li>
<li>Open-Closed Principle</li>
<li>Inversion of Control</li>
<li>Aspect Oriented Programming</li>
</ul>


<p>Embracing the Single Responsibility Principle, Open-Closed Principle and Inversion of Control results in trading fragile application logic for fragile configuration logic. That’s a pretty good trade.</p>

<p>Fragile application logic is costly and it will come back to hurt you repeatedly. It goes without saying that fragile application logic is not testable, otherwise it wouldn’t be fragile. No tests mean changes are scary, so you have to compensate by regaining an intimate understanding of all the twists and turns in order to have enough confidence to make the change. The time and mental energy it takes to work through delicate and subtle conditional logic is enormous. My mediocre brain can only manage a short call stack and juggle a handful of variables at once.</p>

<p>Let’s say you’re sold on the promise of pretentious acronyms like SRP, OCP, IoC and the like. So now you end up with a billion small classes and gobs of code dedicated to wiring-up your favorite inversion of control container (mine is Unity). Are we better for it? Let’s examine this trade-off by implementing the same functionality conventionally and using fancy patterns and principles.</p>

<p>The Scenario: Implement captcha as the first step in some business process, like a registration form.</p>

<p><img class="plain" src="/images/posts/captcha2.png"></p>

<p>That’s pretty easy, I don’t need anything fancy to do that.</p>

<p>``` c#
public class SimpleController : Controller {</p>

<pre><code>private const string CaptchaTextKey = "captcha_text";

public ActionResult Index() {
    return View();
}

public ActionResult Render() {

    var captchaImage = new CaptchaImage();

    HttpContext.Session[CaptchaTextKey] = captchaImage.Text;

    using (Bitmap bitmap = captchaImage.RenderImage()) {
        using (var stream = new MemoryStream()) {
            bitmap.Save(stream, ImageFormat.Jpeg);
            return new FileContentResult(stream.ToArray(), "image/jpeg");
        }
    }
}

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    var actualText = (string)HttpContext.Session[CaptchaTextKey];

    if (captchaText.Equals(actualText)) {
        ViewData["message"] = "You are a human";
    } else {
        ViewData["message"] = "fail";
    }

    return View("Index");
}
</code></pre>

<p>}
```</p>

<p>Fast forward 3 months and amazingly new requirements have crept into the simple captcha controller. Consider these contrived yet poignant scenarios:</p>

<ul>
<li>After the project goes to QA, you realize there needs to be a way to bypass the captcha check so automated Selenium tests can get to the rest of the application.</li>
<li>After the project goes live, the business decides it wants to know how many users are hitting the form. So an audit log is added.</li>
<li>After reviewing the audit log, it is discovered that some IPs are attacking the form, so we decide to implement a black list.</li>
<li>After the black list is live, the servers begin to perform slowly, so detailed logging is added.</li>
<li>The logs show the black list lookup is slow during attacks, so it is determined that caching should be implemented.</li>
<li>The business is doing a television promotion and expects traffic spikes. IT wants real-time visibility to monitor the application during heavy load.</li>
</ul>


<p>Now our <code>SimpleController</code> has morphed into a <code>SmellyController</code>:</p>

<p>``` c#
public class SmellyController : Controller {</p>

<pre><code>// ...

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    var ip = HttpContext.Request.ServerVariables["REMOTE_ADDR"];

    var isBlackListed = IsBlackListed(ip);

    if (IsMatch(captchaText) &amp;&amp; !isBlackListed || captchaText == "selenium" {
        ViewData["message"] = "You are a human";

        // reset consecutive error count
        ConsecutiveErrorCount = 0;
    } else {
        ViewData["message"] = "fail";

        // add to black list
        if (ConsecutiveErrorCount++ &gt;= 3 &amp;&amp; !isBlackListed) {
            AddToBlackList(ip);
        }
    }

    WriteToAuditLog(ip);

    return View("Index");
}

private bool IsBlackListed(string ip) {
    var sessionKey = BlackListKey + ip;
    object result = HttpContext.Cache[sessionKey];

    if (result == null) {
        using (var connection = new SqlConnection(connectionString)) {
            connection.Open();
            var sql = "select count(*) from blacklist where ip = @ip";
            using (var command = new SqlCommand(sql)) {
                command.Connection = connection;
                command.Parameters.AddWithValue("@ip", ip);
                result = Convert.ToBoolean(command.ExecuteScalar());
            }
        }
        HttpContext.Cache[sessionKey] = result;
    }

    return (bool)result;
}

private int ConsecutiveErrorCount {
    get { return Convert.ToInt32(HttpContext.Session[ErrorCountKey] ?? "0"); }
    set { HttpContext.Session[ErrorCountKey] = value; }
}

// ...

private bool IsMatch(IEquatable&lt;string&gt; captchaText) {
    var actualText = (string)HttpContext.Session[CaptchaTextKey];
    return captchaText.Equals(actualText);
}
</code></pre>

<p>```</p>

<p>How does this smell? Let me count the ways:</p>

<ol>
<li><a href="http://xunitpatterns.com/Hard%20to%20Test%20Code.html">Hard to test</a></li>
<li><a href="http://c2.com/cgi/wiki?MixingLevels">Mixed levels of abstraction</a></li>
<li>No separation of concerns</li>
</ol>


<p>What if we had followed <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">Uncle Bob’s SOLID principles</a>? Our controller might look like this:</p>

<p>``` c#
public class SolidController : Controller {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;

public SolidController(ICaptchaProvider captchaProvider) {
    this.captchaProvider = captchaProvider;
}

public ActionResult Index() {
    return View();
}

public ActionResult Render() {
    using (var stream = new MemoryStream()) {
        captchaProvider.Render(stream, ImageFormat.Jpeg);
        return new FileContentResult(stream.ToArray(), "image/jpeg");
    }
}

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    if (captchaProvider.Verify(captchaText)) {
        ViewData["message"] = "You are a human";
    } else {
        ViewData["message"] = "fail";
    }

    return View("Index");
}
</code></pre>

<p>}
```</p>

<p>And our original simple captcha provider could look like this:</p>

<p>``` c#
[Serializable]
public class SimpleCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private string captchaText;

public void Render(Stream stream, ImageFormat format) {
    var captchaImage = new CaptchaImage();

    captchaText = captchaImage.Text;

    using (Bitmap bitmap = captchaImage.RenderImage()) {
        bitmap.Save(stream, format);
    }
}

public bool Verify(string text) {
    return text.Equals(captchaText);
}
</code></pre>

<p>}
```</p>

<p>If you’re wondering why we don’t have to store the captcha text in the session, it’s because we’re putting the onus on the container to give us the same instance of <code>SimpleCaptchaProvider</code> each time it’s requested in the same session.</p>

<p>Let’s revisit the list of features that made our controller smelly and see how we could have done it open-closed style (by writing new code instead modifying old code). The go-to technique for this is the decorator pattern. So let’s make a decorator to look for a secret captcha password that our selenium test knows and let it through.</p>

<p>``` c#
public class SeleniumBypassCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;
private readonly string password;

public SeleniumBypassCaptchaProvider(
    ICaptchaProvider captchaProvider,
    string password) {

    this.captchaProvider = captchaProvider;
    this.password = password;
}

public void Render(Stream stream, ImageFormat format) {
    captchaProvider.Render(stream, format);
}

public bool Verify(string captchaText) {
    if (captchaText == password) {
        return true;
    }
    return captchaProvider.Verify(captchaText);
}
</code></pre>

<p>}
```</p>

<p>Next is the audit log, then the black list. These could be implemented as two more decorators, however we’re outgrowing this solution which means it’s time to refactor. Let’s switch hats for a few minutes and promote our decorator chain into an explicit chain of responsibility. This is like adding another lane to the freeway, it really opens things up. We’re modifying existing code so maybe you’re wondering what happened to our open-closed principle? It’s still there, I promise. The first point I’ll make is that refactoring is a special activity. It does not change the observable behavior of the application. When working with single responsibility classes, all we end up doing is adapting the logic to a different interface. In our case, we’re moving logic from <code>BlackListCaptchaProvider</code> to <code>BlackListVerifyFilter</code>. The logic stays intact and the unit tests are minimally impacted.</p>

<p>The end result of this refactor might look like this:</p>

<p>``` c#
public class VerifyChainCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;
private readonly IServiceProvider serviceProvider;

public VerifyChainCaptchaProvider(
    ICaptchaProvider captchaProvider,
    IServiceProvider serviceProvider) {

    this.captchaProvider = captchaProvider;
    this.serviceProvider = serviceProvider;
}

public void Render(Stream stream, ImageFormat format) {
    captchaProvider.Render(stream, format);
}

public bool Verify(string captchaText) {
    return new Pipeline&lt;string , bool&gt;(serviceProvider)
        .Add&lt;AuditLoggingFilter&gt;()
        .Add&lt;BlackListingFilter&gt;()
        .Add&lt;SeleniumBypassFilter&gt;()
        .Add(new CaptchaProviderAdapter(captchaProvider))
        .Process(captchaText);
}
</code></pre>

<p>}
```</p>

<p>Was it worth it? Well, we’re left with all these little classes each with their single responsibility, however we still have to wire it up. I’m not going to lie, it’s ugly and it’s fragile. So why is this design any better? It’s better because troubleshooting bad configuration is better than troubleshooting bad application logic. Bad application logic can do really bad things. In a 24/7 business-critical application, this usually happens around 3 AM and involves you waking up and trying adjust your eyes to a harsh laptop screen. With bad configuration on the other hand, whole chunks of functionality are just missing. Chances are your app won’t even start, or maybe it starts but the black list or the audit logging isn’t wired in. These issues are easy to test and when you fix them, you have enormous confidence that the functionality you just wired-in will work and continue to work in the wee hours of the morning.</p>

<p>The second point I’ll make is the code more closely follows the way we think about our application. This makes it easier to respond to change because new requirements are extensions of the way we already think about our application. Consider the scenario that our selenium secret passphrase is not secure enough for production and we want to add an IP restriction or signature to make sure it’s really our selenium test that is getting through. In our smelly controller, a selenium test bypass is not an explicit concept, it’s just an or-clause tacked on to the end of an already abused if statement. We’ll have to go into our smelly controller and do some thrashing around in the most important and delicate block of code. In our solid controller however, we have a nicely abstracted testable single responsibility class we can isolate our change to.</p>

<p>As another example, consider the scenario that our black list caching is consuming too much memory on the web server. With our SOLID design we can surgically replace our <code>ICacheProvider</code> with an implementation backed by Memcached. Bits of functionality are free to evolve at their own pace. Some areas of your application will need a beefy solution and some will be just fine with a simple one. The important thing is that concerns are isolated from each other and allowed to fulfill their own destiny.</p>

<h2>Aspect-Oriented Programming</h2>

<p>I mentioned aspect oriented programming at the beginning of the article in a shallow attempt to pique your interest. So before I wrap things up I’ll show how it fits in. Since we’re already using an IoC container and faithfully employing our SOLID design principles, we pretty much get AOP for free. This is a big deal. Software running under service level agreements and government regulations demands visibility and having aspects in your toolbox is a must. Because aspects are reusable, they are typically higher quality and more mature than something hand-rolled for a one-off scenario. And because they are bolt-on, our core business logic stays focused on our business domain.</p>

<p>Consider the cliché logging example. It’s overused, but works well not unlike the calculator example for unit testing or the singleton job interview question. The idea is that we tell our IoC container to apply a logging aspect to all objects it has registered. Here’s what my logging aspect produces:</p>

<pre style="background-color: black; color: #ddd;">
DEBUG VerifyChainCaptchaProvider.Render() stream = MemoryStream, format = Jpeg
DEBUG SimpleCaptchaProvider.Render() stream = MemoryStream, format = Jpeg
DEBUG SimpleCaptchaProvider.Render() [72 ms]
DEBUG VerifyChainCaptchaProvider.Render() [74 ms]
DEBUG VerifyChainCaptchaProvider.Verify() text = afds
DEBUG AuditLoggingFilter.Process() input = afds
DEBUG BlackListingFilter.Process() input = afds
DEBUG CachingBlackListService.IsBlocked() ip = 127.0.0.1
DEBUG CachingBlackListService.IsBlocked() > False [0 ms]
DEBUG SeleniumBypassFilter.Process() input = afds
DEBUG SimpleCaptchaProvider.Verify() text = afds
DEBUG SimpleCaptchaProvider.Verify() > False [0 ms]
DEBUG SeleniumBypassFilter.Process() > False [1 ms]
DEBUG BlackListingFilter.Process() > False [4 ms]
DEBUG AuditLoggingFilter.Process() > False [8 ms]
DEBUG VerifyChainCaptchaProvider.Verify() > False [14 ms]
</pre>


<p>Again, this is powerful because we didn’t have to pollute our code with logging statements, yet we see quality log entries with input, output and execution time. In addition to logging, we can attach performance counters to meaningful events, add exception policies to notify us when things go wrong, selectively add caching at run-time and lots more. To see it all in action, you can <a href="http://www.secure-session.com/files/20/205/1664955444/E20E1B7ED7/i/brownbag-20110205b.zip">download the source code</a> for the examples used in this article.</p>
]]></content>
  </entry>
  
</feed>
