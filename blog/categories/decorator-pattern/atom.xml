<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Decorator Pattern | Agile at Work]]></title>
  <link href="http://www.agileatwork.com/blog/categories/decorator-pattern/atom.xml" rel="self"/>
  <link href="http://www.agileatwork.com/"/>
  <updated>2013-10-05T16:14:04-07:00</updated>
  <id>http://www.agileatwork.com/</id>
  <author>
    <name><![CDATA[Michael Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring Decorators with Google Guice]]></title>
    <link href="http://www.agileatwork.com/configuring-decorators-with-google-guice/"/>
    <updated>2012-02-20T07:11:00-08:00</updated>
    <id>http://www.agileatwork.com/configuring-decorators-with-google-guice</id>
    <content type="html"><![CDATA[<p>You have a few options and each have their trade-offs. The one I find least annoying requires using a binding annotation. Since I’m stuck using annotations with Guice anyway, using one more to facilitate a decorator seems like an acceptable concession. Before I go on though, I have to take a moment. My beef isn’t about verbose configuration or annotations, it’s that once again the documentation gets it all wrong and sends the impressionable reader down a misguided path. Let’s take a look at this excerpt from the Guice documentation for binding annotations:</p>

<p>``` java
public class RealBillingService implements BillingService {</p>

<p>  @Inject
  public RealBillingService(@PayPal CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>This bit of innocuous code encourages the reader to squander the power of dependency inversion and reduce it to a clunky tool that makes unit testing a little bit easier. That sounds harsh, so let’s start by discussing what Guice is and the problem it solves.</p>

<p>Guice and the like are referred to as IoC containers. That’s Inversion of Control. It’s a pretty general principle and when applied to object oriented programming, it manifests itself in the form of a technique called <em>Dependency Inversion</em>. In terms of the <code>BillingService</code> example, it means the code depends on a <code>CreditCardProcessor</code> abstraction rather than new‘ing something specific like a <code>PayPalCreditCardProcessor</code>. Perhaps depends is an overloaded term here. With or without the new keyword, there is a dependency. In one case, a higher level module is responsible for deciding what implementation to use, and in the other case, the class itself decides that it’s using a <code>PayPalCreditCardProcessor</code>, period.</p>

<p>Writing all your classes to declare their dependencies leaves you with the tedious task of building up complex object graphs before you can actually use your object. This is where Guice comes in. It’s a tool to simplify the havoc wreaked by inverting your dependencies and it’s inevitable when guided by a few principles like DRY (Don’t Repeat Yourself). If you don’t believe me, go ahead a see for yourself. Write some truly SOLID code and you’ll end up writing an IoC container in the process.</p>

<p>So now that we’ve covered what Guice is and the problem it solves, we are ready to talk about what’s wrong with <code>@PayPal</code>. Specifying the concrete class you expect with an annotation is pretty much the same as just declaring the dependency explicitly. Sure, you get a few points for using an interface and injecting the object, but it’s really just going through the motions while entirely missing the point. It would be like the Karate Kid going into auto detailing after learning wax-on, wax-off.</p>

<p>Abstractions create seams in your code. It’s how you add new behavior as the application evolves and it’s the key to managing complexity. Since we’re looking at a billing example, let’s throw out a few requirements that could pop up. How about some protection against running the same transaction twice in a short time period. How about checking a blacklist of credit cards or customers. Or maybe you need a card number that always fails in a particular way so QA can test the sad path. Or maybe your company works with a few payment gateways and wants to choose the least cost option based on the charge amount or card type. In this little snippet of code, we’ve got 2 seams we can use to work in this behavior. We’ve got the <code>BillingService</code> and <code>CreditCardProcesor</code>.</p>

<p>Oh, wait a minute we’re declaring that we need the <code>PayPalCreditCardProcessor</code> with that annotation so now our code is rigid and we can’t inject additional behavior by wrapping it in a <code>DoubleChargeCreditCardProcessor</code>, open-closed style. That’s the ‘O’ in SOLID. So you’re probably thinking, why can’t you just change the annotation from <code>@PayPal</code> to <code>@DoubleCharge</code>? Let’s dive a little deeper into this example to find out:</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  @Inject
  public DoubleChargeCreditCardProcessor(CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>I’m not going to rant about how extends is evil and that you’re better off with a decorator because I’ve already done that, and this article is about how to wire up a decorator with Guice. So the challenge here is how to configure the container to supply the correct credit card processor as the first dependency of our double charge processor which itself implements <code>CreditCardProcessor</code>. Looking at the Guice documentation, you would likely think the answer is to do this:</p>

<p>``` java
public class RealBillingService implements BillingService {</p>

<p>  @Inject
  public RealBillingService(@DoubleCharge CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  @Inject
  public DoubleChargeCreditCardProcessor(@PayPal CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>That’s wrong though. The <code>CreditCardProcessor</code> isn’t a thing, it’s a seam and it’s where you put additional behavior like preventing duplicate charges in a short time period. If you look at the decorator, you’ll notice that it has nothing to do with PayPal. That’s because it’s a business rule and shouldn’t be mixed with integration code. Our business rule code and the PayPal integration code will likely live in different packages and the <code>CreditCardProcessor</code> abstraction could get assembled differently for any number of reasons. Maybe your application supports multi-tenancy and each tenant can use a different payment gateway. We can’t reuse our double charge business rule if it’s hard-coded to wrap a PayPal processor, and that’s a problem.</p>

<p>While I don’t particularly like using annotations for this sort of thing, it’s not the root cause. As a mechanic, it works just fine and can help us accomplish our task. The problem is that the documentation is subtly wrong and encourages mis-use of this feature. Chances are the original author of Guice and the person writing the documentation for binding annotations aren’t the same person so it’s understandable that a detail like this could get lost in the shuffle. The correct way to use binding annotations and not undermine the point of injecting your dependencies in the first place is like so:</p>

<p>``` java
public class DoubleChargeCreditCardProcessor implements CreditCardProcessor {</p>

<p>  public static final String BASE = &ldquo;DoubleChargeCreditCardProcessor.base&rdquo;;</p>

<p>  public DoubleChargeCreditCardProcessor(@Named(BASE) CreditCardProcessor processor, &hellip;) {</p>

<pre><code>...
</code></pre>

<p>  }
```</p>

<p>``` java
public class ConfigureCreditCardProcessor extends AbstractModule {</p>

<p>  @Override
  protected void configure() {</p>

<pre><code>bind(CreditCardProcessor.class).to(DoubleChargeCreditCardProcessor.class);

bind(CreditCardProcessor.class)
  .annotatedWith(Names.named(DoubleChargeCreditCardProcessor.BASE))
  .to(PayPayCreditCardProcessor.class);
</code></pre>

<p>  }
}
```</p>

<p>Did you catch the difference? It’s subtle, but the devil is in the details. In this last example, the DoubleChargeCreditCardProcessor doesn’t know or care what implementation it’s decorating. It simply declares a name for it’s dependency so it can be referenced unambiguously in a configuration module. This moves the configuration logic to… well, configuration code. Now you can see that the code is once again flexible and you can easily imagine more sophisticated configuration logic that could consider tenant settings or environment variables in selecting the proper combination of credit card processors to assemble.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inheritance is Evil: The Epic Fail of the DataAnnotationsModelBinder]]></title>
    <link href="http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/"/>
    <updated>2010-01-04T06:52:00-08:00</updated>
    <id>http://www.agileatwork.com/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder</id>
    <content type="html"><![CDATA[<p>The <code>DataAnnotationsModelBinder</code> is a pretty neat little class that enforces validation attributes on models like this one:</p>

<p>``` c#
public class Product {</p>

<pre><code>public int Id { get; set; }

[Required]
public string Description { get; set; }

[Required]
[RegularExpression(@"^\$?\d+(\.(\d{2}))?$")]
public decimal UnitPrice { get; set; }
</code></pre>

<p>}
```</p>

<p>Just for the record, this is a <a href="http://aspnet.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=24471">cool bit of code</a> that was released to the community for backseat drivers like me to use and complain about. I’m really only bitter because I can’t use it. Let’s take a peek at the source code to see why:</p>

<p>``` c#
/// <summary>
/// An implementation of IModelBinder which is designed to be a replacement
/// default model binder, adding the functionality of validation via the validation
/// attributes in System.ComponentModel.DataAnnotations from .NET 4.0.
/// </summary>
public class DataAnnotationsModelBinder : DefaultModelBinder {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>The problem with this class is that it’s not just about validation. It’s more about binding with validation sprinkled in. The author even states this as a design goal with the comment “designed to be a replacement default model binder.” This is a violation of the <em>Single Responsibility Principle</em> and it’s the reason I can’t use it. The <code>DefaultModelBinder</code> does some basic reflection mapping of form elements to model properties. That’s cool, but what about a controller action that takes json, xml, or anything slightly more complicated than what the default binder can handle?</p>

<p>I’ll tell you what happens. You write a custom model binder which is pretty easy and happens to be a pretty rad extension point in the MVC framework. Consider this model binder that deserializes json:</p>

<p>``` c#
public class JsonModelBinder<T> : IModelBinder {</p>

<pre><code>private string key;

public JsonModelBinder(string requestKey) {
    this.key = requestKey;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var json = controllerContext.HttpContext.Request[key];
    return new JsonSerializer().Deserialize&lt;T&gt;(json);
}
</code></pre>

<p>}
```</p>

<p>That’s pretty cool, but now I’ve lost my validation! This my friend is the evil of inheritance and the epic fail of the <code>DataAnnotationsModelBinder</code>. So what’s wrong with inheritance, isn’t that what OOP is all about? The short answer is no (the long answer is also no.)</p>

<p><img class="plain" src="/images/posts/petervenkmanghostbusters.jpg"></p>

<blockquote><p>Human sacrifice, dogs and cats living together… mass hysteria! — Dr. Peter Venkman</p></blockquote>

<p>Inheritance is pretty enticing especially coming from procedural-land and it often looks deceptively elegant. I mean all I need to do is add this one bit of functionality to another other class, right? Well, one of the problems is that inheritance is probably the worst form of coupling you can have. Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members. This makes your system rigid and fragile.</p>

<p>The more tragic flaw however is the new subclass brings with it all the baggage and opinion of the inheritance chain. Why does a model that enforces validation attributes care how the model is constructed? The answer is it shouldn’t, and to add insult to injury, the better design is actually easier to implement. Listen closely and you may hear the wise whispers of our forefathers…</p>

<p><img class="plain" src="/images/posts/ward.jpg" title="Ward Cunningham" >
<img class="plain" src="/images/posts/martin.jpg" title="Marting Fowler" >
<img class="plain" src="/images/posts/kent.jpg" title="Kent Beck" >
<img class="plain" src="/images/posts/robert.jpg" title="Robert Martin" ></p>

<blockquote><p>Use the decorator pattern.</p></blockquote>

<p>Is this really going to solve all my problems? The short answer is yes. Let’s take a look:</p>

<p>``` c#
public class BetterDataAnnotationsModelBinder : IModelBinder {</p>

<pre><code>private IModelBinder binder;

public BetterDataAnnotationsModelBinder(IModelBinder binder) {
    this.binder = binder;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var model = binder.BindModel(controllerContext, bindingContext);
    AddValidationErrorsToModelState(model, controllerContext);
    return model;
}

...
</code></pre>

<p>}
```</p>

<p>Now all this class does is enforce validation and we can use whatever model binder we want to construct our object. Let’s wire this up in the <code>Global.asax</code> real quick:</p>

<p>``` c#
var productModelBinder = new JsonModelBinder<Product>(&ldquo;product&rdquo;);</p>

<p>ModelBinders.Binders.Add(</p>

<pre><code>typeof(Product),
new BetterDataAnnotationsModelBinder(productModelBinder));
</code></pre>

<p>```</p>

<p>This is cool for the following reasons:</p>

<ol>
<li>We are not coupled to the <code>DefaultModelBinder</code>. This means we don’t know or care about the structure and implementation details of it so it’s free to change in the next version of ASP.NET MVC.</li>
<li>The code is simpler because it is only about validation.</li>
<li>The behavior is composable. This means we can add validation to any model binder (like our json model binder) and bolt on more responsibilities with a chain of decorators. How about converting DateTime fields to UTC or striping formatting characters from phone numbers?</li>
<li>It’s easy to test.</li>
<li>You can substitute a decorator for a subclass in most cases and in most cases it’s the right choice. You’re better off making the decorator your default choice and only settle for inheritance when you really need it.</li>
</ol>


<p><img class="plain" src="/images/posts/kip.jpg"></p>

<blockquote><p>…don’t be jealous that I’ve been chatting online with babes all day. Besides, we both know that I’m training to be a cage fighter. — Kip</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Model Binder in ASP.NET MVC]]></title>
    <link href="http://www.agileatwork.com/custom-model-binder-in-asp-dot-net-mvc/"/>
    <updated>2009-12-31T14:59:00-08:00</updated>
    <id>http://www.agileatwork.com/custom-model-binder-in-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>The default model binder or <code>DataAnnotationsModelBinder</code> in ASP.NET MVC works well for simple data structures that basically map properties directly to form elements, but it quickly breaks down in a real world application. Take this simple scenario:</p>

<p><img class="plain" src="/images/posts/brimley.png"></p>

<p>The built-in model binder can handle the easy fields like <code>FirstName</code>, <code>LastName</code>, and <code>Email</code>, but it doesn’t know how to deal with the <code>Roles</code>. This is where the custom model binder comes in:</p>

<p>``` c#
public class UserModelBinder : IModelBinder {</p>

<pre><code>private readonly IModelBinder binder;

public UserModelBinder(IModelBinder binder) {
    this.binder = binder;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var user = (User)binder.BindModel(controllerContext, bindingContext);
    AddRoles(user, controllerContext);
    return user;
}

private static void AddRoles(User user, ControllerContext controllerContext) {
    foreach (var role in GetRoles(controllerContext)) {
        user.Add(role);
    }
}

private static IEnumerable&lt;Role&gt; GetRoles(ControllerContext controllerContext) {
    var roles = controllerContext.HttpContext.Request["roles"];
    if (roles == null) yield break;
    foreach (var roleId in roles.Split(',')) {
        yield return (Role)Convert.ToInt32(roleId);
    }
}
</code></pre>

<p>}
```</p>

<p>And it gets wired-up in the <code>Global.asax</code> like this:</p>

<p><code>c#
var defaultBinder = new DataAnnotationsModelBinder();
ModelBinders.Binders.DefaultBinder = defaultBinder;
ModelBinders.Binders.Add(typeof(User), new UserModelBinder(defaultBinder));
</code></p>

<p>Because <code>UserModelBinder</code> is a decorator, it preserves the base functionality (like validation) of the default binder and only adds the part about mapping the roles. This is good stuff because it keeps construction of the model out of the controller. That’s the Single-Responsibility Principle in action.</p>

<h2>Command Query Separation</h2>

<p>The two functions <code>AddRoles</code>, and <code>GetRoles</code> are an example of command query separation (CQS). It would be easy to combine those two functions together and in fact that’s how it looked at first. So why bother separating them? Well it doesn’t really matter in this simple case, but it’s like how I tell my 3 year-old son to move his milk cup away from the edge of the table. I figure it’s a good habit that will prevent a few spills in the long run. The idea with CQS is there is a natural seam between finding objects and doing stuff with them. I buy that. I expect <code>GetRoles</code> to be more volatile than <code>AddRoles</code> or at least change for different reasons.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Does it Hurt?]]></title>
    <link href="http://www.agileatwork.com/where-does-it-hurt/"/>
    <updated>2009-12-26T20:30:00-08:00</updated>
    <id>http://www.agileatwork.com/where-does-it-hurt</id>
    <content type="html"><![CDATA[<p>Notes from my Brown Bag Learning Forum Presentation. <a href="http://www.secure-session.com/files/20/205/1664955444/E20E1B7ED7/i/brownbag-20110205b.zip">Download the source code</a>, or just sit back and relax.</p>

<h3>GoF Patterns:</h3>

<ul>
<li>Chain of Responsibility</li>
<li>Decorator</li>
<li>Adapter</li>
</ul>


<h3>Buzz Phrases:</h3>

<ul>
<li>Single Responsibility Principle</li>
<li>Open-Closed Principle</li>
<li>Inversion of Control</li>
<li>Aspect Oriented Programming</li>
</ul>


<p>Embracing the Single Responsibility Principle, Open-Closed Principle and Inversion of Control results in trading fragile application logic for fragile configuration logic. That’s a pretty good trade.</p>

<p>Fragile application logic is costly and it will come back to hurt you repeatedly. It goes without saying that fragile application logic is not testable, otherwise it wouldn’t be fragile. No tests mean changes are scary, so you have to compensate by regaining an intimate understanding of all the twists and turns in order to have enough confidence to make the change. The time and mental energy it takes to work through delicate and subtle conditional logic is enormous. My mediocre brain can only manage a short call stack and juggle a handful of variables at once.</p>

<p>Let’s say you’re sold on the promise of pretentious acronyms like SRP, OCP, IoC and the like. So now you end up with a billion small classes and gobs of code dedicated to wiring-up your favorite inversion of control container (mine is Unity). Are we better for it? Let’s examine this trade-off by implementing the same functionality conventionally and using fancy patterns and principles.</p>

<p>The Scenario: Implement captcha as the first step in some business process, like a registration form.</p>

<p><img class="plain" src="/images/posts/captcha2.png"></p>

<p>That’s pretty easy, I don’t need anything fancy to do that.</p>

<p>``` c#
public class SimpleController : Controller {</p>

<pre><code>private const string CaptchaTextKey = "captcha_text";

public ActionResult Index() {
    return View();
}

public ActionResult Render() {

    var captchaImage = new CaptchaImage();

    HttpContext.Session[CaptchaTextKey] = captchaImage.Text;

    using (Bitmap bitmap = captchaImage.RenderImage()) {
        using (var stream = new MemoryStream()) {
            bitmap.Save(stream, ImageFormat.Jpeg);
            return new FileContentResult(stream.ToArray(), "image/jpeg");
        }
    }
}

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    var actualText = (string)HttpContext.Session[CaptchaTextKey];

    if (captchaText.Equals(actualText)) {
        ViewData["message"] = "You are a human";
    } else {
        ViewData["message"] = "fail";
    }

    return View("Index");
}
</code></pre>

<p>}
```</p>

<p>Fast forward 3 months and amazingly new requirements have crept into the simple captcha controller. Consider these contrived yet poignant scenarios:</p>

<ul>
<li>After the project goes to QA, you realize there needs to be a way to bypass the captcha check so automated Selenium tests can get to the rest of the application.</li>
<li>After the project goes live, the business decides it wants to know how many users are hitting the form. So an audit log is added.</li>
<li>After reviewing the audit log, it is discovered that some IPs are attacking the form, so we decide to implement a black list.</li>
<li>After the black list is live, the servers begin to perform slowly, so detailed logging is added.</li>
<li>The logs show the black list lookup is slow during attacks, so it is determined that caching should be implemented.</li>
<li>The business is doing a television promotion and expects traffic spikes. IT wants real-time visibility to monitor the application during heavy load.</li>
</ul>


<p>Now our <code>SimpleController</code> has morphed into a <code>SmellyController</code>:</p>

<p>``` c#
public class SmellyController : Controller {</p>

<pre><code>// ...

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    var ip = HttpContext.Request.ServerVariables["REMOTE_ADDR"];

    var isBlackListed = IsBlackListed(ip);

    if (IsMatch(captchaText) &amp;&amp; !isBlackListed || captchaText == "selenium" {
        ViewData["message"] = "You are a human";

        // reset consecutive error count
        ConsecutiveErrorCount = 0;
    } else {
        ViewData["message"] = "fail";

        // add to black list
        if (ConsecutiveErrorCount++ &gt;= 3 &amp;&amp; !isBlackListed) {
            AddToBlackList(ip);
        }
    }

    WriteToAuditLog(ip);

    return View("Index");
}

private bool IsBlackListed(string ip) {
    var sessionKey = BlackListKey + ip;
    object result = HttpContext.Cache[sessionKey];

    if (result == null) {
        using (var connection = new SqlConnection(connectionString)) {
            connection.Open();
            var sql = "select count(*) from blacklist where ip = @ip";
            using (var command = new SqlCommand(sql)) {
                command.Connection = connection;
                command.Parameters.AddWithValue("@ip", ip);
                result = Convert.ToBoolean(command.ExecuteScalar());
            }
        }
        HttpContext.Cache[sessionKey] = result;
    }

    return (bool)result;
}

private int ConsecutiveErrorCount {
    get { return Convert.ToInt32(HttpContext.Session[ErrorCountKey] ?? "0"); }
    set { HttpContext.Session[ErrorCountKey] = value; }
}

// ...

private bool IsMatch(IEquatable&lt;string&gt; captchaText) {
    var actualText = (string)HttpContext.Session[CaptchaTextKey];
    return captchaText.Equals(actualText);
}
</code></pre>

<p>```</p>

<p>How does this smell? Let me count the ways:</p>

<ol>
<li><a href="http://xunitpatterns.com/Hard%20to%20Test%20Code.html">Hard to test</a></li>
<li><a href="http://c2.com/cgi/wiki?MixingLevels">Mixed levels of abstraction</a></li>
<li>No separation of concerns</li>
</ol>


<p>What if we had followed <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">Uncle Bob’s SOLID principles</a>? Our controller might look like this:</p>

<p>``` c#
public class SolidController : Controller {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;

public SolidController(ICaptchaProvider captchaProvider) {
    this.captchaProvider = captchaProvider;
}

public ActionResult Index() {
    return View();
}

public ActionResult Render() {
    using (var stream = new MemoryStream()) {
        captchaProvider.Render(stream, ImageFormat.Jpeg);
        return new FileContentResult(stream.ToArray(), "image/jpeg");
    }
}

[AcceptVerbs(HttpVerbs.Post)]
public ActionResult Verify(string captchaText) {

    if (captchaProvider.Verify(captchaText)) {
        ViewData["message"] = "You are a human";
    } else {
        ViewData["message"] = "fail";
    }

    return View("Index");
}
</code></pre>

<p>}
```</p>

<p>And our original simple captcha provider could look like this:</p>

<p>``` c#
[Serializable]
public class SimpleCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private string captchaText;

public void Render(Stream stream, ImageFormat format) {
    var captchaImage = new CaptchaImage();

    captchaText = captchaImage.Text;

    using (Bitmap bitmap = captchaImage.RenderImage()) {
        bitmap.Save(stream, format);
    }
}

public bool Verify(string text) {
    return text.Equals(captchaText);
}
</code></pre>

<p>}
```</p>

<p>If you’re wondering why we don’t have to store the captcha text in the session, it’s because we’re putting the onus on the container to give us the same instance of <code>SimpleCaptchaProvider</code> each time it’s requested in the same session.</p>

<p>Let’s revisit the list of features that made our controller smelly and see how we could have done it open-closed style (by writing new code instead modifying old code). The go-to technique for this is the decorator pattern. So let’s make a decorator to look for a secret captcha password that our selenium test knows and let it through.</p>

<p>``` c#
public class SeleniumBypassCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;
private readonly string password;

public SeleniumBypassCaptchaProvider(
    ICaptchaProvider captchaProvider,
    string password) {

    this.captchaProvider = captchaProvider;
    this.password = password;
}

public void Render(Stream stream, ImageFormat format) {
    captchaProvider.Render(stream, format);
}

public bool Verify(string captchaText) {
    if (captchaText == password) {
        return true;
    }
    return captchaProvider.Verify(captchaText);
}
</code></pre>

<p>}
```</p>

<p>Next is the audit log, then the black list. These could be implemented as two more decorators, however we’re outgrowing this solution which means it’s time to refactor. Let’s switch hats for a few minutes and promote our decorator chain into an explicit chain of responsibility. This is like adding another lane to the freeway, it really opens things up. We’re modifying existing code so maybe you’re wondering what happened to our open-closed principle? It’s still there, I promise. The first point I’ll make is that refactoring is a special activity. It does not change the observable behavior of the application. When working with single responsibility classes, all we end up doing is adapting the logic to a different interface. In our case, we’re moving logic from <code>BlackListCaptchaProvider</code> to <code>BlackListVerifyFilter</code>. The logic stays intact and the unit tests are minimally impacted.</p>

<p>The end result of this refactor might look like this:</p>

<p>``` c#
public class VerifyChainCaptchaProvider : ICaptchaProvider {</p>

<pre><code>private readonly ICaptchaProvider captchaProvider;
private readonly IServiceProvider serviceProvider;

public VerifyChainCaptchaProvider(
    ICaptchaProvider captchaProvider,
    IServiceProvider serviceProvider) {

    this.captchaProvider = captchaProvider;
    this.serviceProvider = serviceProvider;
}

public void Render(Stream stream, ImageFormat format) {
    captchaProvider.Render(stream, format);
}

public bool Verify(string captchaText) {
    return new Pipeline&lt;string , bool&gt;(serviceProvider)
        .Add&lt;AuditLoggingFilter&gt;()
        .Add&lt;BlackListingFilter&gt;()
        .Add&lt;SeleniumBypassFilter&gt;()
        .Add(new CaptchaProviderAdapter(captchaProvider))
        .Process(captchaText);
}
</code></pre>

<p>}
```</p>

<p>Was it worth it? Well, we’re left with all these little classes each with their single responsibility, however we still have to wire it up. I’m not going to lie, it’s ugly and it’s fragile. So why is this design any better? It’s better because troubleshooting bad configuration is better than troubleshooting bad application logic. Bad application logic can do really bad things. In a 24/7 business-critical application, this usually happens around 3 AM and involves you waking up and trying adjust your eyes to a harsh laptop screen. With bad configuration on the other hand, whole chunks of functionality are just missing. Chances are your app won’t even start, or maybe it starts but the black list or the audit logging isn’t wired in. These issues are easy to test and when you fix them, you have enormous confidence that the functionality you just wired-in will work and continue to work in the wee hours of the morning.</p>

<p>The second point I’ll make is the code more closely follows the way we think about our application. This makes it easier to respond to change because new requirements are extensions of the way we already think about our application. Consider the scenario that our selenium secret passphrase is not secure enough for production and we want to add an IP restriction or signature to make sure it’s really our selenium test that is getting through. In our smelly controller, a selenium test bypass is not an explicit concept, it’s just an or-clause tacked on to the end of an already abused if statement. We’ll have to go into our smelly controller and do some thrashing around in the most important and delicate block of code. In our solid controller however, we have a nicely abstracted testable single responsibility class we can isolate our change to.</p>

<p>As another example, consider the scenario that our black list caching is consuming too much memory on the web server. With our SOLID design we can surgically replace our <code>ICacheProvider</code> with an implementation backed by Memcached. Bits of functionality are free to evolve at their own pace. Some areas of your application will need a beefy solution and some will be just fine with a simple one. The important thing is that concerns are isolated from each other and allowed to fulfill their own destiny.</p>

<h2>Aspect-Oriented Programming</h2>

<p>I mentioned aspect oriented programming at the beginning of the article in a shallow attempt to pique your interest. So before I wrap things up I’ll show how it fits in. Since we’re already using an IoC container and faithfully employing our SOLID design principles, we pretty much get AOP for free. This is a big deal. Software running under service level agreements and government regulations demands visibility and having aspects in your toolbox is a must. Because aspects are reusable, they are typically higher quality and more mature than something hand-rolled for a one-off scenario. And because they are bolt-on, our core business logic stays focused on our business domain.</p>

<p>Consider the cliché logging example. It’s overused, but works well not unlike the calculator example for unit testing or the singleton job interview question. The idea is that we tell our IoC container to apply a logging aspect to all objects it has registered. Here’s what my logging aspect produces:</p>

<pre style="background-color: black; color: #ddd;">
DEBUG VerifyChainCaptchaProvider.Render() stream = MemoryStream, format = Jpeg
DEBUG SimpleCaptchaProvider.Render() stream = MemoryStream, format = Jpeg
DEBUG SimpleCaptchaProvider.Render() [72 ms]
DEBUG VerifyChainCaptchaProvider.Render() [74 ms]
DEBUG VerifyChainCaptchaProvider.Verify() text = afds
DEBUG AuditLoggingFilter.Process() input = afds
DEBUG BlackListingFilter.Process() input = afds
DEBUG CachingBlackListService.IsBlocked() ip = 127.0.0.1
DEBUG CachingBlackListService.IsBlocked() > False [0 ms]
DEBUG SeleniumBypassFilter.Process() input = afds
DEBUG SimpleCaptchaProvider.Verify() text = afds
DEBUG SimpleCaptchaProvider.Verify() > False [0 ms]
DEBUG SeleniumBypassFilter.Process() > False [1 ms]
DEBUG BlackListingFilter.Process() > False [4 ms]
DEBUG AuditLoggingFilter.Process() > False [8 ms]
DEBUG VerifyChainCaptchaProvider.Verify() > False [14 ms]
</pre>


<p>Again, this is powerful because we didn’t have to pollute our code with logging statements, yet we see quality log entries with input, output and execution time. In addition to logging, we can attach performance counters to meaningful events, add exception policies to notify us when things go wrong, selectively add caching at run-time and lots more. To see it all in action, you can <a href="http://www.secure-session.com/files/20/205/1664955444/E20E1B7ED7/i/brownbag-20110205b.zip">download the source code</a> for the examples used in this article.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integration Testing with NHibernate]]></title>
    <link href="http://www.agileatwork.com/integration-testing-with-nhibernate/"/>
    <updated>2009-11-06T21:59:00-08:00</updated>
    <id>http://www.agileatwork.com/integration-testing-with-nhibernate</id>
    <content type="html"><![CDATA[<p>While the first-level cache in NHibernate is great for production, it can be super annoying for integration tests. Basically I just want to make sure my mapping works and that when I save an entity it goes to the database.</p>

<p>``` c#
[TestFixture]
public class MyIntegrationFixture : IntegrationFixture {</p>

<pre><code>[Test]
public void Can_add_elements() {
    var repository = Container.Resolve&lt;IRepository&lt;MyEntity&gt;&gt;();

    var entity = repository.FindById(1);
    entity.Add(new Element { Description = "The Description" });
    repository.Save(entity);

    Assert.That(repository.FindById(1).Elements.Count(), Is.EqualTo(1));
}
</code></pre>

<p>}
```</p>

<p>The problem is the next time I call <code>FindById()</code> I get my object back from the first level cache <code>ISession</code>, so the Assert passes but looking at the SQL output by NHibernate I can see that no INSERT statement is happening. There are two things that NHibernate needs to do in order for the integration test to work as expected.</p>

<ol>
<li>There needs to be an explicit transaction and it needs to be committed in order to actually send the INSERT statements to the database.</li>
<li>The entity needs to be evicted from the session in order to ensure that the next call to <code>FindById()</code> actually goes to the database.</li>
</ol>


<p>It’s the job of the application to manage the scope of the unit of work. Typically this is per web request in a web app. In a test, it’s per test. This turns into a bunch of boiler-plate noise. Also, this business about evicting the session is an NHibernate specific thing and doesn’t belong in a test that is dealing with an IRepository abstraction.</p>

<p>Since I solve all my problems with a pipeline or decorator, I figured I’d decorate the <code>ISession</code> and commit and evict on the operations I care about:</p>

<p>``` c#
public class AutoCommitAndEvictSession : SessionDecorator {</p>

<pre><code>public AutoCommitAndEvictSession(ISession session)
    : base(session) {
}

public override object Save(object obj) {
    object result;
    using (var tx = Session.BeginTransaction()) {
        result = Session.Save(obj);
        tx.Commit();
    }
    Session.Evict(obj);
    return result;
}

public override void Update(object obj) {
    CommitAndEvict(base.Update, obj);
}

public override void SaveOrUpdate(object obj) {
    CommitAndEvict(base.SaveOrUpdate, obj);
}

public override void Delete(object obj) {
    CommitAndEvict(base.Delete, obj);
}

private void CommitAndEvict(Action&lt;object&gt; action, object entity) {
    using (var tx = Session.BeginTransaction()) {
        action.Invoke(entity);
        tx.Commit();
    }
    Session.Evict(entity);
}
</code></pre>

<p>}
```</p>

<p>Then I just work it into a test fixture like this:</p>

<p>``` c#
[TestFixture]
public abstract class IntegrationFixture {</p>

<pre><code>protected IUnityContainer Container { get; private set; }

[TestFixtureSetUp]
public virtual void TestFixtureSetUp() {
    Container = new UnityContainer()
        .AddNewExtension&lt;ConfigureNHibernate&gt;();
}

[TestFixtureTearDown]
public virtual void TestFixtureTearDown() {
    Container.Dispose();
}

[SetUp]
public virtual void SetUp() {
    var session = Container.Resolve&lt;ISessionFactory&gt;().OpenSession();
    Container.RegisterInstance&lt;ISession&gt;(new AutoCommitAndEvictSession(session));
}

[TearDown]
public virtual void TearDown() {
    Container.Resolve&lt;ISession&gt;().Dispose();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
