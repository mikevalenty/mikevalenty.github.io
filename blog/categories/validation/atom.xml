<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Validation | Mike Valenty]]></title>
  <link href="http://www.agileatwork.com/blog/categories/validation/atom.xml" rel="self"/>
  <link href="http://www.agileatwork.com/"/>
  <updated>2015-04-20T22:56:51-07:00</updated>
  <id>http://www.agileatwork.com/</id>
  <author>
    <name><![CDATA[Mike Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Validation with Unity Interception]]></title>
    <link href="http://www.agileatwork.com/validation-with-unity-interception/"/>
    <updated>2009-07-18T18:20:00-07:00</updated>
    <id>http://www.agileatwork.com/validation-with-unity-interception</id>
    <content type="html"><![CDATA[<p><img class="plain" src="/images/posts/funny_sign_5.jpg"></p>

<p>This is how I want things to look:</p>

<p>``` c#
public class UpdateUserRequest
{</p>

<pre><code>[AuthorizedUserPublisherRequired]
public int UserId { get; set; }

[Required("Name is required")]
public string Name { get; set; }

[ValidZipCodeRequired("Invalid zip code")]
public string ZipCode { get; set; }
</code></pre>

<p>}</p>

<p>public interface IUserService
{</p>

<pre><code>void Update(UpdateUserRequest request);
</code></pre>

<p>}
```</p>

<p>There are validation frameworks out there that will do this, so what’s my beef? Well, first of all I want to inject the validators with dependencies to implement the juicier rules. And second, I’m treating validation as a core concern so I don’t want a dependency on a framework like Enterprise Library. I had several questions like:</p>

<ol>
<li>How do I get dependencies into the validators?</li>
<li>How do I get <code>ValidZipCodeRequired</code> to fire with the value of the <code>ZipCode</code> property</li>
<li>How do I initiate this on <code>userService.Update()</code>?</li>
</ol>


<p>Let’s take a look at building up the validators.</p>

<p>``` c#
public class ValidZipCodeRequiredAttribute : ValidatorAttribute
{</p>

<pre><code>public override IValidator CreateValidator(IValidatorFactory factory)
{
    return new factory.Create&lt;ValidZipCodeRequiredValidator&gt;();
}
</code></pre>

<p>}
```</p>

<p>This allows me to make a <code>UnityValidatorFactory</code> that can supply all my dependencies. Now how about this business of running the <code>ValidZipCodeRequiredValidator</code> with the value of the <code>ZipCode</code> property? For that I made a composite validator that loops through each property and runs the annotated validator against it’s property value.</p>

<p>``` c#
public class CompositeValidator<T> : IValidator<T>
{</p>

<pre><code>private IValidatorFactory factory;

public CompositeValidator(IValidatorFactory factory)
{
    this.factory = factory;
}

public IEnumerable&lt;RuleException&gt; Validate(T subject)
{
    List&lt;RuleException&gt; exceptions = new List&lt;RuleException&gt;();

    foreach (PropertyInfo property in typeof(T).GetProperties())
    {
        foreach (var validator in GetValidatorsFor(property))
        {
            exceptions.AddRange(validator.Validate(property.GetValue(subject, null)));
        }
    }

    return exceptions;
}

private IEnumerable&lt;IValidator&gt; GetValidatorsFor(ICustomAttributeProvider provider)
{
    foreach (ValidatorAttribute attribute
        in provider.GetCustomAttributes(typeof(ValidatorAttribute), true))
    {
        yield return attribute.CreateValidator(factory);
    }
}
</code></pre>

<p>}
```</p>

<p>Now I just need to run the <code>CompositeValidator</code> on <code>userService.Update()</code>. For that I use Unity Interception:</p>

<p>``` c#
public class ValidationCallHandler : ICallHandler
{</p>

<pre><code>private IValidator validator;

public ValidationCallHandler(IValidator validator)
{
    this.validator = validator;
}

public IMethodReturn Invoke(IMethodInvocation input, GetNextHandlerDelegate getNext)
{
    var ruleExceptions = ValidateEachArgument(input.Arguments);

    if (ruleExceptions.Count() &gt; 0)
    {
        throw new ValidationException(ruleExceptions);
    }

    return getNext()(input, getNext);
}

private IEnumerable&lt;RuleException&gt; ValidateEachArgument(IParameterCollection arguments)
{
    var ruleExceptions = new List&lt;RuleException&gt;();

    foreach (var arg in arguments)
    {
        ruleExceptions.AddRange(validator.Validate(arg));
    }

    return ruleExceptions;
}

public int Order { get; set; }
</code></pre>

<p>}
```</p>

<p>Phew, we’re almost done. The only thing left is to apply this validator in configuration so I can keep the Unity reference out of my core domain. That looks like this:</p>

<p>``` c#
container.AddNewExtension<Interception>()</p>

<pre><code>.Configure&lt;Interception&gt;()
.SetInterceptorFor&lt;IUserService&gt;(new InterfaceInterceptor())
.AddPolicy("UserServiceValidationPolicy")
.AddCallHandler&lt;ValidationCallHandler&gt;()
.AddMatchingRule&lt;AlwaysApplyMatchingRule&gt;();
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
