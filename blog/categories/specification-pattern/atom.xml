<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Specification Pattern | Agile at Work]]></title>
  <link href="http://mikevalenty.github.io/blog/categories/specification-pattern/atom.xml" rel="self"/>
  <link href="http://mikevalenty.github.io/"/>
  <updated>2013-10-02T21:52:59-07:00</updated>
  <id>http://mikevalenty.github.io/</id>
  <author>
    <name><![CDATA[Michael Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Could Have Been a Stored Procedure]]></title>
    <link href="http://mikevalenty.github.io/this-could-have-been-a-stored-procedure/"/>
    <updated>2009-06-11T20:56:00-07:00</updated>
    <id>http://mikevalenty.github.io/this-could-have-been-a-stored-procedure</id>
    <content type="html"><![CDATA[<p><img class="plain right" src="/images/posts/domaindrivendesignbookcover.jpg"></p>

<p>I read <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain Driven Design</a> about a year and a half ago and when I got to the part about the specification pattern, I thought it was really cool and I couldn’t wait to try it out. Maybe the pattern gods were listening or maybe I was unknowingly using <a href="http://www.thesecret.tv/">the secret</a>. Either way, it was pretty much the next morning that I went to work and had the perfect project dropped in my lap.</p>

<p>Our phone system routes live phone calls to doctor’s offices and the project was to bill the doctor if the call met the following criteria:</p>

<ol>
<li>Caller is a new patient (pressed “1” instead of “2” in response to a voice prompt)</li>
<li>A live call was connected for more than 20 seconds or message longer than 10 seconds was recorded.</li>
<li>The doctor has not already been billed for this caller.</li>
<li>The call is not from a known list of test numbers.</li>
</ol>


<p>The application subscribes to an event stream of new call records and runs them through this composite specification to determine if the call is billable.</p>

<p>``` c#
public bool IsBillable(CallRecord call)
{</p>

<pre><code>ISpecification&lt;CallRecord&gt; billableCallSpecification = new NewPatient()
    .And(new MinLengthLiveCall(liveCallSeconds).Or(new MinLengthMessage(messageSeconds))
    .And(new RepeatCall(referralFinder).Not())
    .And(new TestCall(testNumbers).Not()));

return billableCallSpecification.IsSatisfiedBy(call);
</code></pre>

<p>}
```</p>

<p>I have to admit that I was already an hour into Query Analyzer blasting through another monster stored procedure when I caught myself. Not just the criteria logic either, I mean bypassing all the event stream hooha and basically just writing the whole enchilada as one gnarly stored procedure that would run as a job. That was a close one!</p>
]]></content>
  </entry>
  
</feed>
