<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Single Responsibility Principle | Agile at Work]]></title>
  <link href="http://mikevalenty.github.io/blog/categories/single-responsibility-principle/atom.xml" rel="self"/>
  <link href="http://mikevalenty.github.io/"/>
  <updated>2013-10-02T22:31:48-07:00</updated>
  <id>http://mikevalenty.github.io/</id>
  <author>
    <name><![CDATA[Michael Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tamarack: Chain of Responsibility Framework for .NET]]></title>
    <link href="http://mikevalenty.github.io/tamarack-chain-of-responsibility-framework-for-net/"/>
    <updated>2011-04-21T21:39:00-07:00</updated>
    <id>http://mikevalenty.github.io/tamarack-chain-of-responsibility-framework-for-net</id>
    <content type="html"><![CDATA[<p>The Chain of Responsibility is a key building block of extensible software.</p>

<blockquote><p>Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it. – Gang of Four</p></blockquote>

<p>Variations of this pattern are the basis for <a href="http://www.oracle.com/technetwork/java/filters-137243.html">Servlet Filters</a>, <a href="http://learn.iis.net/page.aspx/366/developing-iis-70-modules-and-handlers-with-the-net-framework/">IIS Modules and Handlers</a> and several open source projects I’ve had the opportunity to work with including <a href="https://www.forge.funambol.org/">Sync4J</a>, <a href="http://james.apache.org/">JAMES</a>, <a href="http://logging.apache.org/log4net/">Log4Net</a>, <a href="http://unity.codeplex.com/">Unity</a> and yes, even <a href="http://www.joomla.org/">Joomla</a>. It’s an essential tool in the OO toolbox and key in transforming rigid procedural code into a composable Domain Specific Language.</p>

<p>I’ve blogged about this pattern before so what’s new this time?</p>

<ol>
<li>The next filter in the chain is provided via a delegate parameter rather than a property</li>
<li>The project is <a href="https://github.com/mikevalenty/tamarack">hosted on github</a></li>
<li>There is a <a href="http://nuget.org/List/Search?packageType=Packages&amp;searchCategory=All+Categories&amp;searchTerm=tamarack">NuGet package</a> for it</li>
</ol>


<p><img class="plain" src="/images/posts/pkgmgr31.png"></p>

<p>How does it work?
It’s pretty simple, there is just one interface to implement and it looks like this:</p>

<p>``` c#
public interface IFilter&lt;T, TOut>
{</p>

<pre><code>TOut Execute(T context, Func&lt;T, TOut&gt; executeNext);
</code></pre>

<p>}
```</p>

<p>Basically, you get an input to operate on and a value to return. The <code>executeNext</code> parameter is a delegate for the next filter in the chain. The filters are composed together in a chain which is referred to as a Pipeline in the Tamarack framework. This structure is the essence of the Chain of Responsibility pattern and it facilitates some pretty cool things:</p>

<ul>
<li>Modify the input before the next filter gets it</li>
<li>Modify the output of the next filter before returning</li>
<li>Short circuit out of the chain by not calling the executeNext delegate</li>
</ul>


<h3>Show me examples!</h3>

<p>Consider a block of code to process a blog comment coming from a web-based rich text editor. There are probably several things you’ll want to do before letting the text into your database.</p>

<p>``` c#
public int Submit(Post post)
{</p>

<pre><code>var pipeline = new Pipeline&lt;Post, int&gt;()
    .Add(new CanoncalizeHtml())
    .Add(new StripMaliciousTags())
    .Add(new RemoveJavascript())
    .Add(new RewriteProfanity())
    .Add(new GuardAgainstDoublePost())
    .Finally(p =&gt; repository.Save(p));

var newId = pipeline.Execute(post);

return newId;
</code></pre>

<p>}
```</p>

<p>What about dependency injection for complex filters? Take a look at this user login pipeline. Notice the generic syntax for adding filters by type. Those filters are built-up using the supplied implementation of <code>System.IServiceProvider</code>. My favorite is <code>UnityServiceProvider</code>.</p>

<p>``` c#
public bool Login(string username, string password)
{</p>

<pre><code>var pipeline = new Pipeline&lt;LoginContext, bool&gt;(serviceProvider)
    .Add&lt;WriteLoginAttemptToAuditLog&gt;()
    .Add&lt;LockoutOnConsecutiveFailures&gt;()
    .Add&lt;AuthenticateAgainstLocalStore&gt;()
    .Add&lt;AuthenticateAgainstLdap&gt;()
    .Finally(c =&gt; false);

return pipeline.Execute(new LoginContext(username, password));
</code></pre>

<p>}
```</p>

<p>Here’s another place you might see the chain of responsibility pattern. Calculating the spam score of a block of text:</p>

<p>``` c#
public double CalculateSpamScore(string text)
{</p>

<pre><code>var pipeline = new Pipeline&lt;string, double&gt;()
    .Add&lt;SpamCopBlacklistFilter&gt;()
    .Add&lt;PerspcriptionDrugFilter&gt;()
    .Add&lt;PornographyFilter&gt;()
    .Finally(score =&gt; 0);

return pipeline.Execute(text);
</code></pre>

<p>}
```</p>

<p>Prefer convention over configuration? Try this instead:</p>

<p>``` c#
public double CalculateSpamScore(string text)
{</p>

<pre><code>var pipeline = new Pipeline&lt;string, double&gt;()
    .AddFiltersIn("Tamarack.Example.Pipeline.SpamScorer.Filters")
    .Finally(score =&gt; 0);

return pipeline.Execute(text);
</code></pre>

<p>}
```</p>

<p>Let’s look at the <code>IFilter</code> interface in action. In the spam score calculator example, each filter looks for markers in the text and adds to the overall spam score by modifying the result of the next filter before returning.</p>

<p>``` c#
public class PerspcriptionDrugFilter : IFilter&lt;string, double>
{</p>

<pre><code>public double Execute(string text, Func&lt;string, double&gt; executeNext)
{
    var score = executeNext(text);

    if (text.Contains("viagra"))
        score += .25;

    return score;
}
</code></pre>

<p>}
```</p>

<p>In the login example, we look for the user in our local user store and if it exists we’ll short-circuit the chain and authenticate the request. Otherwise we’ll let the request continue to the next filter which looks for the user in an LDAP repository.</p>

<p>``` c#
public class AuthenticateAgainstLocalStore : IFilter&lt;LoginContext, bool>
{</p>

<pre><code>private readonly IUserRepository repository;

public AuthenticateAgainstLocalStore(IUserRepository repository)
{
    this.repository = repository;
}

public bool Execute(LoginContext context, Func&lt;LoginContext, bool&gt; executeNext)
{
    var user = repository.FindByUsername(context.Username);

    if (user != null)
        return user.IsValid(context.Password);

    return executeNext(context);
}
</code></pre>

<p>}
```</p>

<p>Why should I use it?</p>

<blockquote><p>It’s pretty much my favorite animal. It’s like a lion and a tiger mixed… bred for its skills in magic. – Napoleon Dynamite</p></blockquote>

<p>It’s simple and mildly opinionated in effort to guide you and your code into The Pit of Success. It’s easy to write single responsibility classes and use inversion of control and composition and convention over configuration and lots of other goodness. Try it out. Tell a friend.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring: Introduce Parameter Object]]></title>
    <link href="http://mikevalenty.github.io/rafactoring-introduce-parameter-object/"/>
    <updated>2010-02-15T06:49:00-08:00</updated>
    <id>http://mikevalenty.github.io/rafactoring-introduce-parameter-object</id>
    <content type="html"><![CDATA[<p>Take a look at this function:</p>

<p>``` c#
public UserIndexViewModel GetIndexViewModel(int pageSize, int pageNumber) {</p>

<pre><code>var model = new UserIndexViewModel();

var allUsers = Session.CreateCriteria&lt;User&gt;();

model.Total = CriteriaTransformer
    .TransformToRowCount(allUsers)
    .UniqueResult&lt;int&gt;();

model.Users = allUsers
    .SetFirstResult(pageSize * (pageNumber - 1) + 1)
    .SetMaxResults(pageSize)
    .AddOrder&lt;User&gt;(u =&gt; u.LastName, Order.Asc)
    .List&lt;User&gt;();

return model;
</code></pre>

<p>}
```</p>

<p>There isn’t much going on here, but it could be better. I’m looking at the arguments <code>pageSize</code> and <code>pageNumber</code>. Notice how they both start with the prefix “page”. That’s a smell. The common prefix means the arguments are related, so let’s apply the <em>Introduce Parameter Object</em> refactoring and see what happens.</p>

<p>``` c#
public class Page {</p>

<pre><code>private readonly int number;
private readonly int size;

public Page(int number, int size) {
    this.number = number;
    this.size = size;
}

public int Size {
    get { return size; }
}

public int Number {
    get { return number; }
}

public int FirstResult {
    get { return size * (number - 1) + 1; }
}
</code></pre>

<p>}
```</p>

<p>What did we accomplish?</p>

<ul>
<li>Creating the parameter object gave us a place to put the logic of calculating the first result of the current page. This logic would otherwise be scattered around the application and even though it’s simple, it’s error prone.</li>
<li>The logic of calculating the first result is testable.</li>
</ul>


<p>``` c#
[Test]
public void Should_calculate_first_result_of_current_page() {</p>

<pre><code>Assert.That(new Page(1, 20).FirstResult, Is.EqualTo(1));
Assert.That(new Page(2, 20).FirstResult, Is.EqualTo(21));
Assert.That(new Page(3, 20).FirstResult, Is.EqualTo(41));
</code></pre>

<p>}
```</p>

<p>It’s not rocket science, but it still deserves a test. Our other option is spinning up Cassini and clicking around to make sure we got it right. That’s just silly. A little piece of me dies each time I press F5 to run a manual test.</p>

<p>Anyway, there is this thing that happens with single responsibility classes. Because their purpose is crisp, it draws out robustness. In this case, I’m thinking about what we should we do if we get zero or a negative value for page number. I’m a fail fast kind of guy, so I’d probably go with a guard clause.</p>

<p>``` c#
public Page(int number, int size) {</p>

<pre><code>GuardAgainstLessThanOne(number);
...
</code></pre>

<p>}
```</p>

<p>But you could silently correct it if that’s how you roll:</p>

<p>``` c#
public int Number {</p>

<pre><code>get { return Math.Max(1, number); }
</code></pre>

<p>}
```</p>

<p>The point is that this is an obvious scenario to consider when looking at such a special purpose object. All too often though, bits of logic are mixed together like 32 kindergarteners sitting next to each other on a rug during a lesson. The room is one fart or tickle away from erupting into total kaos. It’s roughly half teaching and half crowd control, only without the rubber bullets and pepper spray. Not surprisingly, overcrowded classrooms don’t work that well and over-ambitous functions don’t work that well either. Each little bit of logic needs some one on one with you. Give it a chance to be all it can be by pulling it aside and getting to know it a little better. You might be surprised.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Interfaces (No Excuses!)]]></title>
    <link href="http://mikevalenty.github.io/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-interfaces-no-excuses/"/>
    <updated>2010-01-13T22:24:00-08:00</updated>
    <id>http://mikevalenty.github.io/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-interfaces-no-excuses</id>
    <content type="html"><![CDATA[<p><span style="font-size: 70%">
The title of this article was inspired by <a href="http://www.joelonsoftware.com/articles/Unicode.html">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) </a>
by Joel Spolsky
</span></p>

<p>I recently saw this question on stackoverflow:</p>

<p><img src="/images/posts/quest.png"></p>

<p>There were good points on both sides, but the majority of responses were from closet interface haters succumbing to the mob effect to say &ldquo;me too&rdquo;. On the other side of the argument, many took cover behind regurgitated responses like interfaces are for mocking dependencies in unit tests and because people that write books say you should use them. So how is it that scores of professional software developers don’t understand or can’t communicate why and how to use the most fundamental of object-oriented language features? Perhaps there is a clue in the details of the original question:</p>

<blockquote><p>Is there some hidden benefit of using an interface when you have 1 version of a class and no immediate need to create an interface?</p></blockquote>

<p>The scattered and ineffectual responses are an unfortunate casualty of the ubiquitous poor online examples found on the Internet. No doubt you’ve seen something like this before:</p>

<p>``` c#
public interface IVehicle {</p>

<pre><code>int NumberOfPassengers { get; }
</code></pre>

<p>}</p>

<p>public class Car : IVehicle {</p>

<pre><code>public int NumberOfPassengers { get { return 4; } }
</code></pre>

<p>}</p>

<p>public class Bus : IVehicle {</p>

<pre><code>public int NumberOfPassengers { get { return 20; } }
</code></pre>

<p>}
```</p>

<p>I can’t help but have visions of rich objects that model the physical world so well they put an end to wars and world hunger. You know, methods like <code>Bark()</code> on a <code>Dog</code> object. These examples aren’t wrong per se, but they usher the reader down a predictable and dead-end path. It’s like the horribly cliché <a href="http://en.wikipedia.org/wiki/Thinking_outside_the_box">nine dots puzzle</a> in which the goal is to link all 9 dots using four straight lines or less, without lifting the pen.</p>

<p>Common sense suggests it can’t be done because we have subconsciously imposed a false restriction that the lines must be within the boundaries of the square (I won’t insult you with the hopelessly worn out catch phrase). The point I’m trying to make here is the examples out there unwittingly set us up for failure. In social science this is called <a href="http://en.wikipedia.org/wiki/Framing_(social_sciences">framing</a>. The human brain is an impressive problem solving machine, but we can be easily fooled by framing a problem in a way that our stereotypes and assumptions obscure the often obvious answer.</p>

<p>In the case of interfaces, the examples suggest the concrete implementations are mutually exclusive physical concepts like <em>Car</em> and <em>Bus</em>, or perhaps <code>SqlUserStore</code> and <code>LdapUserStore</code>. It’s an easy concept to latch on to, and it’s the bane of good object oriented design.</p>

<p>To think of a user store as a thing is a mistake. <code>IUserStore</code> defines a seam in which responsibility crosses a boundary. In an MVC application, it’s the seam between the controller’s routing responsibility and the model’s business logic. If you only have one implementation of <code>IUserStore</code>, then you’d better take another look because that’s a smell.</p>

<p>The place to start looking is within your one and only implementation. Where is the logic about sending a confirmation email or checking if the username is available? Chances are it ended up in the controller leaving your model anemic or it ended up in your model violating the single responsibility principle. Either way it’s a big fail sandwich.</p>

<p>Again, this is because of the false assumption that implementations are mutually exclusive as in the <em>Car</em> and <em>Bus</em> example. In other words, if I have a <em>Car</em>, then I don’t have a <em>Bus</em>. This is the wrong way to think of objects. Of course they can be mutually exclusive, but they are far more powerful when they are composable. Consider these implementations of <code>IUserService</code>:</p>

<ul>
<li><code>EmailConfirmationUserService</code></li>
<li><code>ValidatingUserService</code></li>
<li><code>SqlUserService</code></li>
<li><code>CachingUserService</code></li>
</ul>


<p>Each concern is orthogonal to each other concern and they are combined together to create the overall behavior of the system. The interface facilitates composition which is the key to high-quality, robust software. So the real problem isn’t that interfaces are overused, it’s that interfaces are squandered.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inheritance is Evil: The Epic Fail of the DataAnnotationsModelBinder]]></title>
    <link href="http://mikevalenty.github.io/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder/"/>
    <updated>2010-01-04T06:52:00-08:00</updated>
    <id>http://mikevalenty.github.io/inheritance-is-evil-the-story-of-the-epic-fail-of-dataannotationsmodelbinder</id>
    <content type="html"><![CDATA[<p>The <code>DataAnnotationsModelBinder</code> is a pretty neat little class that enforces validation attributes on models like this one:</p>

<p>``` c#
public class Product {</p>

<pre><code>public int Id { get; set; }

[Required]
public string Description { get; set; }

[Required]
[RegularExpression(@"^\$?\d+(\.(\d{2}))?$")]
public decimal UnitPrice { get; set; }
</code></pre>

<p>}
```</p>

<p>Just for the record, this is a <a href="http://aspnet.codeplex.com/Release/ProjectReleases.aspx?ReleaseId=24471">cool bit of code</a> that was released to the community for backseat drivers like me to use and complain about. I’m really only bitter because I can’t use it. Let’s take a peek at the source code to see why:</p>

<p>``` c#
/// <summary>
/// An implementation of IModelBinder which is designed to be a replacement
/// default model binder, adding the functionality of validation via the validation
/// attributes in System.ComponentModel.DataAnnotations from .NET 4.0.
/// </summary>
public class DataAnnotationsModelBinder : DefaultModelBinder {</p>

<pre><code>...
</code></pre>

<p>}
```</p>

<p>The problem with this class is that it’s not just about validation. It’s more about binding with validation sprinkled in. The author even states this as a design goal with the comment “designed to be a replacement default model binder.” This is a violation of the <em>Single Responsibility Principle</em> and it’s the reason I can’t use it. The <code>DefaultModelBinder</code> does some basic reflection mapping of form elements to model properties. That’s cool, but what about a controller action that takes json, xml, or anything slightly more complicated than what the default binder can handle?</p>

<p>I’ll tell you what happens. You write a custom model binder which is pretty easy and happens to be a pretty rad extension point in the MVC framework. Consider this model binder that deserializes json:</p>

<p>``` c#
public class JsonModelBinder<T> : IModelBinder {</p>

<pre><code>private string key;

public JsonModelBinder(string requestKey) {
    this.key = requestKey;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var json = controllerContext.HttpContext.Request[key];
    return new JsonSerializer().Deserialize&lt;T&gt;(json);
}
</code></pre>

<p>}
```</p>

<p>That’s pretty cool, but now I’ve lost my validation! This my friend is the evil of inheritance and the epic fail of the <code>DataAnnotationsModelBinder</code>. So what’s wrong with inheritance, isn’t that what OOP is all about? The short answer is no (the long answer is also no.)</p>

<p><img class="plain" src="/images/posts/petervenkmanghostbusters.jpg"></p>

<blockquote><p>Human sacrifice, dogs and cats living together… mass hysteria! — Dr. Peter Venkman</p></blockquote>

<p>Inheritance is pretty enticing especially coming from procedural-land and it often looks deceptively elegant. I mean all I need to do is add this one bit of functionality to another other class, right? Well, one of the problems is that inheritance is probably the worst form of coupling you can have. Your base class breaks encapsulation by exposing implementation details to subclasses in the form of protected members. This makes your system rigid and fragile.</p>

<p>The more tragic flaw however is the new subclass brings with it all the baggage and opinion of the inheritance chain. Why does a model that enforces validation attributes care how the model is constructed? The answer is it shouldn’t, and to add insult to injury, the better design is actually easier to implement. Listen closely and you may hear the wise whispers of our forefathers…</p>

<p><img class="plain" src="/images/posts/ward.jpg" title="Ward Cunningham" >
<img class="plain" src="/images/posts/martin.jpg" title="Marting Fowler" >
<img class="plain" src="/images/posts/kent.jpg" title="Kent Beck" >
<img class="plain" src="/images/posts/robert.jpg" title="Robert Martin" ></p>

<blockquote><p>Use the decorator pattern.</p></blockquote>

<p>Is this really going to solve all my problems? The short answer is yes. Let’s take a look:</p>

<p>``` c#
public class BetterDataAnnotationsModelBinder : IModelBinder {</p>

<pre><code>private IModelBinder binder;

public BetterDataAnnotationsModelBinder(IModelBinder binder) {
    this.binder = binder;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var model = binder.BindModel(controllerContext, bindingContext);
    AddValidationErrorsToModelState(model, controllerContext);
    return model;
}

...
</code></pre>

<p>}
```</p>

<p>Now all this class does is enforce validation and we can use whatever model binder we want to construct our object. Let’s wire this up in the <code>Global.asax</code> real quick:</p>

<p>``` c#
var productModelBinder = new JsonModelBinder<Product>(&ldquo;product&rdquo;);</p>

<p>ModelBinders.Binders.Add(</p>

<pre><code>typeof(Product),
new BetterDataAnnotationsModelBinder(productModelBinder));
</code></pre>

<p>```</p>

<p>This is cool for the following reasons:</p>

<ol>
<li>We are not coupled to the <code>DefaultModelBinder</code>. This means we don’t know or care about the structure and implementation details of it so it’s free to change in the next version of ASP.NET MVC.</li>
<li>The code is simpler because it is only about validation.</li>
<li>The behavior is composable. This means we can add validation to any model binder (like our json model binder) and bolt on more responsibilities with a chain of decorators. How about converting DateTime fields to UTC or striping formatting characters from phone numbers?</li>
<li>It’s easy to test.</li>
<li>You can substitute a decorator for a subclass in most cases and in most cases it’s the right choice. You’re better off making the decorator your default choice and only settle for inheritance when you really need it.</li>
</ol>


<p><img class="plain" src="/images/posts/kip.jpg"></p>

<blockquote><p>…don’t be jealous that I’ve been chatting online with babes all day. Besides, we both know that I’m training to be a cage fighter. — Kip</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Model Binder in ASP.NET MVC]]></title>
    <link href="http://mikevalenty.github.io/custom-model-binder-in-asp-dot-net-mvc/"/>
    <updated>2009-12-31T14:59:00-08:00</updated>
    <id>http://mikevalenty.github.io/custom-model-binder-in-asp-dot-net-mvc</id>
    <content type="html"><![CDATA[<p>The default model binder or <code>DataAnnotationsModelBinder</code> in ASP.NET MVC works well for simple data structures that basically map properties directly to form elements, but it quickly breaks down in a real world application. Take this simple scenario:</p>

<p><img class="plain" src="/images/posts/brimley.png"></p>

<p>The built-in model binder can handle the easy fields like <code>FirstName</code>, <code>LastName</code>, and <code>Email</code>, but it doesn’t know how to deal with the <code>Roles</code>. This is where the custom model binder comes in:</p>

<p>``` c#
public class UserModelBinder : IModelBinder {</p>

<pre><code>private readonly IModelBinder binder;

public UserModelBinder(IModelBinder binder) {
    this.binder = binder;
}

public object BindModel(ControllerContext controllerContext, ...) {
    var user = (User)binder.BindModel(controllerContext, bindingContext);
    AddRoles(user, controllerContext);
    return user;
}

private static void AddRoles(User user, ControllerContext controllerContext) {
    foreach (var role in GetRoles(controllerContext)) {
        user.Add(role);
    }
}

private static IEnumerable&lt;Role&gt; GetRoles(ControllerContext controllerContext) {
    var roles = controllerContext.HttpContext.Request["roles"];
    if (roles == null) yield break;
    foreach (var roleId in roles.Split(',')) {
        yield return (Role)Convert.ToInt32(roleId);
    }
}
</code></pre>

<p>}
```</p>

<p>And it gets wired-up in the <code>Global.asax</code> like this:</p>

<p><code>c#
var defaultBinder = new DataAnnotationsModelBinder();
ModelBinders.Binders.DefaultBinder = defaultBinder;
ModelBinders.Binders.Add(typeof(User), new UserModelBinder(defaultBinder));
</code></p>

<p>Because <code>UserModelBinder</code> is a decorator, it preserves the base functionality (like validation) of the default binder and only adds the part about mapping the roles. This is good stuff because it keeps construction of the model out of the controller. That’s the Single-Responsibility Principle in action.</p>

<h2>Command Query Separation</h2>

<p>The two functions <code>AddRoles</code>, and <code>GetRoles</code> are an example of command query separation (CQS). It would be easy to combine those two functions together and in fact that’s how it looked at first. So why bother separating them? Well it doesn’t really matter in this simple case, but it’s like how I tell my 3 year-old son to move his milk cup away from the edge of the table. I figure it’s a good habit that will prevent a few spills in the long run. The idea with CQS is there is a natural seam between finding objects and doing stuff with them. I buy that. I expect <code>GetRoles</code> to be more volatile than <code>AddRoles</code> or at least change for different reasons.</p>
]]></content>
  </entry>
  
</feed>
