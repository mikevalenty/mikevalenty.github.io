<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Domain Driven Design | Agile at Work]]></title>
  <link href="http://mikevalenty.github.io/blog/categories/domain-driven-design/atom.xml" rel="self"/>
  <link href="http://mikevalenty.github.io/"/>
  <updated>2013-10-02T18:25:28-07:00</updated>
  <id>http://mikevalenty.github.io/</id>
  <author>
    <name><![CDATA[Michael Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Class Isn’t Always a Noun]]></title>
    <link href="http://mikevalenty.github.io/a-class-isnt-always-a-noun/"/>
    <updated>2009-12-04T12:45:00-08:00</updated>
    <id>http://mikevalenty.github.io/a-class-isnt-always-a-noun</id>
    <content type="html"><![CDATA[<p>There is a convention programmers go by that says object names should be nouns and methods names should start with a verb. That’s crap and I’ll tell you why. First off, it’s an old rule kind of like Hungarian notation. Okay that was low. To be fair, I would probably recommend this rule to a college student.</p>

<p>However, if you’re doing this as your full-time job and you’re neck deep in a complex business domain, then you are seriously selling yourself short. When working in a team environment you’ve got to use every means possible to communicate what you were thinking and what hard-earned knowledge you gained along the way. Some poor sucker is going to open your project at some point and your code should be screaming important concepts right from the class list.</p>

<p><img src="/images/posts/yext1.png"></p>

<p>I don’t expect you to understand how the app works, but you should at least get a feel right away for the things that are important. Knowing it’s a console app, you could find the entry point and quickly navigate to the meat and potatoes of the application.</p>

<p>``` c#
public class SyncListingJob : MarshalByRefObject, IJob
{</p>

<pre><code>private IServiceProvider locator;
private YextListing listing;

public SyncListingJob(IServiceProvider locator)
{
    this.locator = locator;
}

public void Init(YextListing listing)
{
    this.listing = listing;
}

[UnitOfWork]
public void Execute()
{
    GuardAgainstNotInitialized();
    SyncListing();
}

private void SyncListing()
{
    new LocatorChain&lt;Yextlisting&gt;(locator)
        .AddNew&lt;RevertDiscontinuedListing&gt;()
        .AddNew&lt;RefreshLinkedBusiness&gt;()
        .AddNew&lt;CreateLinkToExistingBusiness&gt;()
        .AddNew&lt;CreateNewBusinessAndLink&gt;()
        .Process(listing);
}

private void GuardAgainstNotInitialized()
{
    if (listing == null) throw new Exception("Job not initialized!");
}
</code></pre>

<p>}
```</p>

<p>* <em>The <code>LocatorChain&lt;T&gt;</code> is an implementation of the chain of responsibility pattern.</em></p>

<p>I do everything I can to push out all the noise and bring the behavior to the surface. Sometimes the right way to name a class is after a feature or behavior. I want my code to read like a DSL and making everything a noun just doesn’t cut it. The drivers for me are context and readability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Driven Design in the Small]]></title>
    <link href="http://mikevalenty.github.io/domain-driven-design-in-the-small/"/>
    <updated>2009-08-08T06:24:00-07:00</updated>
    <id>http://mikevalenty.github.io/domain-driven-design-in-the-small</id>
    <content type="html"><![CDATA[<p>A few months ago we built a <a href="http://www.magentocommerce.com/">Magento</a> extension to send orders to a product supplier via soap for payment and fulfillment along with affiliate tracking. As part of the process, a contact record was created in the affiliate’s CRM account.</p>

<p> <img src="/images/posts/SubmitYourIdea1.jpg"></p>

<p>Recently, the stake holders came up with a twist that went something like this: If the order contains a gift card, add the contact to a specific folder in the CRM application. No big deal, we had a nicely abstracted <code>OrderGateway</code> interface and I was already envisioning a quick addition to the existing decorator chain.</p>

<p>``` php
class OrderWithGiftCardGateway extends OrderGatewayDecorator
{</p>

<pre><code>...

public function createOrder(CreateOrderRequest $order)
{
    if ($this-&gt;containsGiftCard($order))
    {
        $this-&gt;addContactToFolder($order);
    }

    return parent::createOrder($order);
}
</code></pre>

<p>}
```</p>

<p>I had a few minutiae questions like what happens with duplicates, etc. It took me nearly an hour to track down the right person and get real answers. During the conversation, a subtle comment was made that I almost missed.</p>

<p>Stake holder: We should check with the product supplier to make sure the gift card sku I made up isn’t for a real product.</p>

<p><strong>Me:</strong> Say what?</p>

<p><strong>Stake holder:</strong> The gift card is not fulfilled by the product supplier, it’s fulfilled by the affiliate.</p>

<p><strong>Me:</strong> %$@!&amp;, I’m glad we had this conversation.</p>

<p>We talked about what it meant for the the affiliate to fulfill the product and basically the folder stuff was okay, but I recommended we remove the fake sku from the order before sending it through.</p>

<p>``` php
public function createOrder(CreateOrderRequest $order)
{</p>

<pre><code>if ($this-&gt;containsGiftCard($order))
{
    $this-&gt;addContactToFolder($order);
    $this-&gt;removeGiftCardFromOrder($order);
}

return parent::createOrder($order);
</code></pre>

<p>}
```</p>

<p>I didn’t have a buddy to pair with so I just grabbed Keith for a minute at the end of the day to walk through things. I recapped the stake holder discussion and we looked through the code. He pointed out I was missing the concept of fulfillment and that was hard earned knowledge that would be lost!</p>

<p>``` php
public function createOrder(CreateOrderRequest $order)
{</p>

<pre><code>if ($this-&gt;containsGiftCard($order))
{
    $this-&gt;sendToAffiliateForFulfillment($order);
    $this-&gt;removeGiftCardFromOrder($order);
}

return parent::createOrder($order);
</code></pre>

<p>}
```</p>

<blockquote><p>That was huge. – Paris Hilton</p></blockquote>

<iframe class="plain" width="640" height="360" src="http://mikevalenty.github.io//www.youtube.com/embed/3nGAk_mo6Rw?feature=player_embedded" frameborder="0" allowfullscreen></iframe>


<p>Why was that huge? Because it changed the conversation. Right away we thought of important requirements like this should be in a transaction with the order and the template email the affiliate gets should include the customer’s address, etc.</p>

<p>It tells an important story for the next guy looking at the code and it changes the role of the programmer from code monkey to business partner. Maybe you think I’m crazy, but this stuff matters to me.</p>
]]></content>
  </entry>
  
</feed>
