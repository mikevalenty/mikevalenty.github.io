<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Refactoring | Agile at Work]]></title>
  <link href="http://www.agileatwork.com/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="http://www.agileatwork.com/"/>
  <updated>2014-01-24T22:59:07-08:00</updated>
  <id>http://www.agileatwork.com/</id>
  <author>
    <name><![CDATA[Mike Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring: Introduce Parameter Object]]></title>
    <link href="http://www.agileatwork.com/rafactoring-introduce-parameter-object/"/>
    <updated>2010-02-15T06:49:00-08:00</updated>
    <id>http://www.agileatwork.com/rafactoring-introduce-parameter-object</id>
    <content type="html"><![CDATA[<p>Take a look at this function:</p>

<p>``` c#
public UserIndexViewModel GetIndexViewModel(int pageSize, int pageNumber) {</p>

<pre><code>var model = new UserIndexViewModel();

var allUsers = Session.CreateCriteria&lt;User&gt;();

model.Total = CriteriaTransformer
    .TransformToRowCount(allUsers)
    .UniqueResult&lt;int&gt;();

model.Users = allUsers
    .SetFirstResult(pageSize * (pageNumber - 1) + 1)
    .SetMaxResults(pageSize)
    .AddOrder&lt;User&gt;(u =&gt; u.LastName, Order.Asc)
    .List&lt;User&gt;();

return model;
</code></pre>

<p>}
```</p>

<p>There isn’t much going on here, but it could be better. I’m looking at the arguments <code>pageSize</code> and <code>pageNumber</code>. Notice how they both start with the prefix “page”. That’s a smell. The common prefix means the arguments are related, so let’s apply the <em>Introduce Parameter Object</em> refactoring and see what happens.</p>

<p>``` c#
public class Page {</p>

<pre><code>private readonly int number;
private readonly int size;

public Page(int number, int size) {
    this.number = number;
    this.size = size;
}

public int Size {
    get { return size; }
}

public int Number {
    get { return number; }
}

public int FirstResult {
    get { return size * (number - 1) + 1; }
}
</code></pre>

<p>}
```</p>

<p>What did we accomplish?</p>

<ul>
<li>Creating the parameter object gave us a place to put the logic of calculating the first result of the current page. This logic would otherwise be scattered around the application and even though it’s simple, it’s error prone.</li>
<li>The logic of calculating the first result is testable.</li>
</ul>


<p>``` c#
[Test]
public void Should_calculate_first_result_of_current_page() {</p>

<pre><code>Assert.That(new Page(1, 20).FirstResult, Is.EqualTo(1));
Assert.That(new Page(2, 20).FirstResult, Is.EqualTo(21));
Assert.That(new Page(3, 20).FirstResult, Is.EqualTo(41));
</code></pre>

<p>}
```</p>

<p>It’s not rocket science, but it still deserves a test. Our other option is spinning up Cassini and clicking around to make sure we got it right. That’s just silly. A little piece of me dies each time I press F5 to run a manual test.</p>

<p>Anyway, there is this thing that happens with single responsibility classes. Because their purpose is crisp, it draws out robustness. In this case, I’m thinking about what we should we do if we get zero or a negative value for page number. I’m a fail fast kind of guy, so I’d probably go with a guard clause.</p>

<p>``` c#
public Page(int number, int size) {</p>

<pre><code>GuardAgainstLessThanOne(number);
...
</code></pre>

<p>}
```</p>

<p>But you could silently correct it if that’s how you roll:</p>

<p>``` c#
public int Number {</p>

<pre><code>get { return Math.Max(1, number); }
</code></pre>

<p>}
```</p>

<p>The point is that this is an obvious scenario to consider when looking at such a special purpose object. All too often though, bits of logic are mixed together like 32 kindergarteners sitting next to each other on a rug during a lesson. The room is one fart or tickle away from erupting into total kaos. It’s roughly half teaching and half crowd control, only without the rubber bullets and pepper spray. Not surprisingly, overcrowded classrooms don’t work that well and over-ambitous functions don’t work that well either. Each little bit of logic needs some one on one with you. Give it a chance to be all it can be by pulling it aside and getting to know it a little better. You might be surprised.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Domain Driven Design in the Small]]></title>
    <link href="http://www.agileatwork.com/domain-driven-design-in-the-small/"/>
    <updated>2009-08-08T06:24:00-07:00</updated>
    <id>http://www.agileatwork.com/domain-driven-design-in-the-small</id>
    <content type="html"><![CDATA[<p>A few months ago we built a <a href="http://www.magentocommerce.com/">Magento</a> extension to send orders to a product supplier via soap for payment and fulfillment along with affiliate tracking. As part of the process, a contact record was created in the affiliate’s CRM account.</p>

<p> <img src="/images/posts/SubmitYourIdea1.jpg"></p>

<p>Recently, the stake holders came up with a twist that went something like this: If the order contains a gift card, add the contact to a specific folder in the CRM application. No big deal, we had a nicely abstracted <code>OrderGateway</code> interface and I was already envisioning a quick addition to the existing decorator chain.</p>

<p>``` php
class OrderWithGiftCardGateway extends OrderGatewayDecorator
{</p>

<pre><code>...

public function createOrder(CreateOrderRequest $order)
{
    if ($this-&gt;containsGiftCard($order))
    {
        $this-&gt;addContactToFolder($order);
    }

    return parent::createOrder($order);
}
</code></pre>

<p>}
```</p>

<p>I had a few minutiae questions like what happens with duplicates, etc. It took me nearly an hour to track down the right person and get real answers. During the conversation, a subtle comment was made that I almost missed.</p>

<p>Stake holder: We should check with the product supplier to make sure the gift card sku I made up isn’t for a real product.</p>

<p><strong>Me:</strong> Say what?</p>

<p><strong>Stake holder:</strong> The gift card is not fulfilled by the product supplier, it’s fulfilled by the affiliate.</p>

<p><strong>Me:</strong> %$@!&amp;, I’m glad we had this conversation.</p>

<p>We talked about what it meant for the the affiliate to fulfill the product and basically the folder stuff was okay, but I recommended we remove the fake sku from the order before sending it through.</p>

<p>``` php
public function createOrder(CreateOrderRequest $order)
{</p>

<pre><code>if ($this-&gt;containsGiftCard($order))
{
    $this-&gt;addContactToFolder($order);
    $this-&gt;removeGiftCardFromOrder($order);
}

return parent::createOrder($order);
</code></pre>

<p>}
```</p>

<p>I didn’t have a buddy to pair with so I just grabbed Keith for a minute at the end of the day to walk through things. I recapped the stake holder discussion and we looked through the code. He pointed out I was missing the concept of fulfillment and that was hard earned knowledge that would be lost!</p>

<p>``` php
public function createOrder(CreateOrderRequest $order)
{</p>

<pre><code>if ($this-&gt;containsGiftCard($order))
{
    $this-&gt;sendToAffiliateForFulfillment($order);
    $this-&gt;removeGiftCardFromOrder($order);
}

return parent::createOrder($order);
</code></pre>

<p>}
```</p>

<blockquote><p>That was huge. – Paris Hilton</p></blockquote>

<iframe class="plain" width="640" height="360" src="http://www.agileatwork.com//www.youtube.com/embed/3nGAk_mo6Rw?feature=player_embedded" frameborder="0" allowfullscreen></iframe>


<p>Why was that huge? Because it changed the conversation. Right away we thought of important requirements like this should be in a transaction with the order and the template email the affiliate gets should include the customer’s address, etc.</p>

<p>It tells an important story for the next guy looking at the code and it changes the role of the programmer from code monkey to business partner. Maybe you think I’m crazy, but this stuff matters to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Martinizing is Not Refactoring]]></title>
    <link href="http://www.agileatwork.com/martinizing-is-not-refactoring/"/>
    <updated>2009-05-24T21:30:00-07:00</updated>
    <id>http://www.agileatwork.com/martinizing-is-not-refactoring</id>
    <content type="html"><![CDATA[<p>A friend of mine, Keith, used the term martinizing (as in <a href="http://www.objectmentor.com/omTeam/martin_r.html">Uncle Bob</a>) for the process of <a href="http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">cleaning code</a>. The term has taken on a very specific meaning and it’s worth a few words.</p>

<p>Martinizing is similar to refactoring in that it does not change the observable behavior of the code, but the goal is different. When I refactor, I am changing the design, usually in an effort to add a new feature in an <a href="http://c2.com/cgi/wiki?OpenClosedPrinciple">open closed</a> manner.</p>

<p>When I martinize, I am telling a story. The most important story being the desired behavior, but also a story of the hard earned knowledge acquired along the way. If I spend hours distilling some business concept. I want to leave a trail for the next guy to understand that a simple property assignment or conditional statement isn’t so simple. And of course the perfect way to punctuate that message is with a well written unit test.</p>
]]></content>
  </entry>
  
</feed>
