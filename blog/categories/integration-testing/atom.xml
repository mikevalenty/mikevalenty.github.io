<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Integration Testing | Agile at Work]]></title>
  <link href="http://www.agileatwork.com/blog/categories/integration-testing/atom.xml" rel="self"/>
  <link href="http://www.agileatwork.com/"/>
  <updated>2013-12-08T09:46:18-08:00</updated>
  <id>http://www.agileatwork.com/</id>
  <author>
    <name><![CDATA[Michael Valenty]]></name>
    <email><![CDATA[mike@valenty.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integration Testing with NHibernate]]></title>
    <link href="http://www.agileatwork.com/integration-testing-with-nhibernate/"/>
    <updated>2009-11-06T21:59:00-08:00</updated>
    <id>http://www.agileatwork.com/integration-testing-with-nhibernate</id>
    <content type="html"><![CDATA[<p>While the first-level cache in NHibernate is great for production, it can be super annoying for integration tests. Basically I just want to make sure my mapping works and that when I save an entity it goes to the database.</p>

<p>``` c#
[TestFixture]
public class MyIntegrationFixture : IntegrationFixture {</p>

<pre><code>[Test]
public void Can_add_elements() {
    var repository = Container.Resolve&lt;IRepository&lt;MyEntity&gt;&gt;();

    var entity = repository.FindById(1);
    entity.Add(new Element { Description = "The Description" });
    repository.Save(entity);

    Assert.That(repository.FindById(1).Elements.Count(), Is.EqualTo(1));
}
</code></pre>

<p>}
```</p>

<p>The problem is the next time I call <code>FindById()</code> I get my object back from the first level cache <code>ISession</code>, so the Assert passes but looking at the SQL output by NHibernate I can see that no INSERT statement is happening. There are two things that NHibernate needs to do in order for the integration test to work as expected.</p>

<ol>
<li>There needs to be an explicit transaction and it needs to be committed in order to actually send the INSERT statements to the database.</li>
<li>The entity needs to be evicted from the session in order to ensure that the next call to <code>FindById()</code> actually goes to the database.</li>
</ol>


<p>It’s the job of the application to manage the scope of the unit of work. Typically this is per web request in a web app. In a test, it’s per test. This turns into a bunch of boiler-plate noise. Also, this business about evicting the session is an NHibernate specific thing and doesn’t belong in a test that is dealing with an IRepository abstraction.</p>

<p>Since I solve all my problems with a pipeline or decorator, I figured I’d decorate the <code>ISession</code> and commit and evict on the operations I care about:</p>

<p>``` c#
public class AutoCommitAndEvictSession : SessionDecorator {</p>

<pre><code>public AutoCommitAndEvictSession(ISession session)
    : base(session) {
}

public override object Save(object obj) {
    object result;
    using (var tx = Session.BeginTransaction()) {
        result = Session.Save(obj);
        tx.Commit();
    }
    Session.Evict(obj);
    return result;
}

public override void Update(object obj) {
    CommitAndEvict(base.Update, obj);
}

public override void SaveOrUpdate(object obj) {
    CommitAndEvict(base.SaveOrUpdate, obj);
}

public override void Delete(object obj) {
    CommitAndEvict(base.Delete, obj);
}

private void CommitAndEvict(Action&lt;object&gt; action, object entity) {
    using (var tx = Session.BeginTransaction()) {
        action.Invoke(entity);
        tx.Commit();
    }
    Session.Evict(entity);
}
</code></pre>

<p>}
```</p>

<p>Then I just work it into a test fixture like this:</p>

<p>``` c#
[TestFixture]
public abstract class IntegrationFixture {</p>

<pre><code>protected IUnityContainer Container { get; private set; }

[TestFixtureSetUp]
public virtual void TestFixtureSetUp() {
    Container = new UnityContainer()
        .AddNewExtension&lt;ConfigureNHibernate&gt;();
}

[TestFixtureTearDown]
public virtual void TestFixtureTearDown() {
    Container.Dispose();
}

[SetUp]
public virtual void SetUp() {
    var session = Container.Resolve&lt;ISessionFactory&gt;().OpenSession();
    Container.RegisterInstance&lt;ISession&gt;(new AutoCommitAndEvictSession(session));
}

[TearDown]
public virtual void TearDown() {
    Container.Resolve&lt;ISession&gt;().Dispose();
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
